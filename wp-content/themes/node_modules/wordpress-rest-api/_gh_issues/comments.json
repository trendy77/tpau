[
 {
  "id": 130021382,
  "url": "https://github.com/kadamwhite/wordpress-rest-api/pull/144",
  "title": "Add initial support for querying custom API endpoints",
  "created_by": "kadamwhite",
  "created_at": "1/30/2016",
  "body": "This begins to address #140, by implementing an `.endpoint` method that will create and return a factory method which can create CollectionRequest instances against the provided endpoint.\r\n\r\nDownsides to this approach:\r\n\r\n- Somewhat duplicative w/r/t .root()\r\n- Presumes that only resource(/:id) format collections will be used\r\n  - Actually supporting an arbitrary structure of URL will eventually be necessary in order to support discovery-based generation; however, at present we haven't worked out a solid approach for parsing PCRE named groups.\r\n\r\nUpsides:\r\n\r\n- Provides a vector to reintroduce .registerType very cleanly\r\n- The move towards defining filter methods as independent modules will make sharing functionality between endpoints much easier!\r\n\r\nThe current plan is to merge this, get feedback, and iterate prior to making a formal decision on supporting this or using an alternative approach prior to releasing v0.7.",
  "state": "open",
  "comments": [],
  "comments_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/144/comments",
  "milestone": null,
  "quicklink": "kadamwhite/wordpress-rest-api#144"
 },
 {
  "id": 127505080,
  "url": "https://github.com/kadamwhite/wordpress-rest-api/issues/124",
  "title": "Return a subset of superagent's error object to error handlers?",
  "created_by": "kadamwhite",
  "created_at": "1/19/2016",
  "body": "Superagent's error response is very verbose, and tends to \"drown\" the actual JSON response received from the API. It might be advantageous to define our own error format that includes only a common subset of superagent's properties, so that the response value is less dependent on the transport library (relevant if we go the route of making this library transport-agnostic or multi-transport, e.g. if you can use it in the browser with jQuery for your AJAX instead of superagent)",
  "state": "open",
  "comments": [],
  "comments_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/124/comments",
  "milestone": null,
  "quicklink": "kadamwhite/wordpress-rest-api#124"
 },
 {
  "id": 124139363,
  "url": "https://github.com/kadamwhite/wordpress-rest-api/issues/118",
  "title": "Add documentation around posts__in",
  "created_by": "kadamwhite",
  "created_at": "12/28/2015",
  "body": "Re: #117, @brad-decker indicates around supporting array filters:\r\n\r\n> You also need to add `post__in` and `post__not_in` to `query_vars` on your wordpress install.\r\n\r\nThis should be addressed in the readme or API documentation.",
  "state": "open",
  "comments": [],
  "comments_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/118/comments",
  "milestone": null,
  "quicklink": "kadamwhite/wordpress-rest-api#118"
 },
 {
  "id": 129820469,
  "url": "https://github.com/kadamwhite/wordpress-rest-api/issues/138",
  "title": "Better support for custom content types",
  "created_by": "artoliukkonen",
  "created_at": "1/29/2016",
  "body": "Currently only way to query custom content types is with .root method.\r\n \r\n```\r\n/**\r\n * Generate a query against an arbitrary path on the current endpoint. This is useful for\r\n * requesting resources at custom WP-API endpoints, such as WooCommerce's `/products`.\r\n *\r\n * @method root\r\n * @param {String} [relativePath] An endpoint-relative path to which to bind the request\r\n * @param {Boolean} [collection] Whether to return a CollectionRequest or a vanilla WPRequest\r\n * @return {CollectionRequest|WPRequest} A request object\r\n */\r\n```\r\n\r\nIt'd be great to be able to define your own custom content types so one would be able to use those just like .posts and .pages . I have some ideas how to achieve this, will try to do a pull request soon.",
  "state": "open",
  "comments": [],
  "comments_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/138/comments",
  "milestone": null,
  "quicklink": "kadamwhite/wordpress-rest-api#138"
 },
 {
  "id": 39299214,
  "url": "https://github.com/kadamwhite/wordpress-rest-api/issues/72",
  "title": "Don't mock 3rd-party request library in tests",
  "created_by": "kadamwhite",
  "created_at": "8/1/2014",
  "body": "It was suggested in code review that using [nock](https://github.com/pgte/nock) or an alternative to mock the server responses would be a more robust approach to testing the library, vs the current approach (in which our tests depend on the specific API provided by superagent).",
  "state": "open",
  "comments": [],
  "comments_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/72/comments",
  "milestone": null,
  "quicklink": "kadamwhite/wordpress-rest-api#72"
 },
 {
  "id": 103483510,
  "url": "https://github.com/kadamwhite/wordpress-rest-api/issues/106",
  "title": "WP api version",
  "created_by": "tommedema",
  "created_at": "8/27/2015",
  "body": "It's not mentioned in the readme: is this driver for the v1 or v2 edition of the WP API plugin?",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/135484933",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/106#issuecomment-135484933",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/106",
    "id": 135484933,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/27/2015",
    "updated_at": "2015-08-27T16:28:01Z",
    "body": "@tommedema 1.0, but some methods will work with 2.0 and I will be updating the library to work fully with the latest Ali plugin in the coming months "
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/135948111",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/106#issuecomment-135948111",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/106",
    "id": 135948111,
    "user": {
     "login": "tommedema",
     "id": 331833,
     "avatar_url": "https://avatars.githubusercontent.com/u/331833?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/tommedema",
     "html_url": "https://github.com/tommedema",
     "followers_url": "https://api.github.com/users/tommedema/followers",
     "following_url": "https://api.github.com/users/tommedema/following{/other_user}",
     "gists_url": "https://api.github.com/users/tommedema/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/tommedema/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/tommedema/subscriptions",
     "organizations_url": "https://api.github.com/users/tommedema/orgs",
     "repos_url": "https://api.github.com/users/tommedema/repos",
     "events_url": "https://api.github.com/users/tommedema/events{/privacy}",
     "received_events_url": "https://api.github.com/users/tommedema/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/29/2015",
    "updated_at": "2015-08-29T06:37:39Z",
    "body": "@kadamwhite is there a way to know which methods? I mostly need to create, request, and edit posts, upload media, and manage tags / categories."
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/136006724",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/106#issuecomment-136006724",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/106",
    "id": 136006724,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/29/2015",
    "updated_at": "2015-08-29T16:19:53Z",
    "body": "@tommedema unfortunately the only way to know right now is to test. I'm planning to put together a compatibility list but I'll be away from the office for several days, so I won't have an opportunity to do so until the second week in September.\r\n\r\nI've heard anecdotal evidence that at least most of the post retrieval methods work in 2.0, and if you try it out id love to know what you find around the rest of them!"
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/136411722",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/106#issuecomment-136411722",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/106",
    "id": 136411722,
    "user": {
     "login": "jasonphillips",
     "id": 5672408,
     "avatar_url": "https://avatars.githubusercontent.com/u/5672408?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/jasonphillips",
     "html_url": "https://github.com/jasonphillips",
     "followers_url": "https://api.github.com/users/jasonphillips/followers",
     "following_url": "https://api.github.com/users/jasonphillips/following{/other_user}",
     "gists_url": "https://api.github.com/users/jasonphillips/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/jasonphillips/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/jasonphillips/subscriptions",
     "organizations_url": "https://api.github.com/users/jasonphillips/orgs",
     "repos_url": "https://api.github.com/users/jasonphillips/repos",
     "events_url": "https://api.github.com/users/jasonphillips/events{/privacy}",
     "received_events_url": "https://api.github.com/users/jasonphillips/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/31/2015",
    "updated_at": "2015-08-31T15:46:15Z",
    "body": "I've begun working on 2.0 compatibility in my branch here: https://github.com/jasonphillips/wordpress-rest-api/tree/APIv2\r\n\r\nSo far, I have updated the taxonomy handler and its routes to work with all the new API paths (significant changes in 2.0 for accessing terms), and updated the tests. That is working well for me in a current project against 2.0; I'll continue to make further updates as I encounter other incompatibilities.\r\n\r\nI could of course put in some pull requests later if public work on a branch over here for V2 begins."
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/145974272",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/106#issuecomment-145974272",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/106",
    "id": 145974272,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/6/2015",
    "updated_at": "2015-10-06T19:35:49Z",
    "body": "@jasonphillips I've seen the work you're doing on your fork, and have begun updating the core library along similar lines.\r\n\r\nI would like your eyes on the changes I've made so far—the 0.6 release will support the API v2, and you can download the beta now via `npm install wordpress-rest-api@beta`. Major changes:\r\n\r\n- The endpoint you pass to the client should still be the path to the API root (`wp-json`); but `.posts`, `.pages` etcetera automatically set `.namespace('wp').version('v2')`, two new methods provided for customizing the version and namespace against which a query is being made\r\n- a `.perPage` method has been added to support pagination handling in the v2 betas\r\n- a `.embed` method has been added to support embeddable response data\r\n  - so far I do not do any transformation of the response JSON, so this comes back as an `_embedded` property on the response object\r\n- Switching to using the new `_links` format is still TODO\r\n- The new taxonomy handling is still TODO\r\n\r\nI would love your input on these changes if you're interested"
   }
  ],
  "comments_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/106/comments",
  "milestone": "V2 Compatibility",
  "quicklink": "kadamwhite/wordpress-rest-api#106"
 },
 {
  "id": 50851677,
  "url": "https://github.com/kadamwhite/wordpress-rest-api/issues/91",
  "title": "Add integration test to ensure URI's are requested as intended",
  "created_by": "kadamwhite",
  "created_at": "12/3/2014",
  "body": "(For background see #89)\r\n\r\nSuperagent automatically converts multiple occurrences of the same query parameter key into array syntax: `param=val&param=val` becomes `param[0]=val&param[1]=val`. Because this behavior was not intuitive (other request libraries use the provided URL exactly as-is), we should add a test to verify that this behavior still occurs in case it changes in future versions of superagent.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/65651602",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/91#issuecomment-65651602",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/91",
    "id": 65651602,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "12/4/2014",
    "updated_at": "2014-12-04T15:47:01Z",
    "body": "Updating issue based on a change of strategy in #89: The goal is to add some tests in which the responses of the HTTP requests are mocked, not the request library itself."
   }
  ],
  "comments_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/91/comments",
  "milestone": "V2 Compatibility",
  "quicklink": "kadamwhite/wordpress-rest-api#91"
 },
 {
  "id": 124367639,
  "url": "https://github.com/kadamwhite/wordpress-rest-api/issues/121",
  "title": "Proposal: posts and pages API filtering",
  "created_by": "leobalter",
  "created_at": "12/30/2015",
  "body": "Looking at the docs on examples like: \r\n\r\n```js\r\nwp.posts().id( n ).revisions()\r\nwp.posts().type( type_name )\r\n```\r\n\r\nHow about fetching only a small subset of posts and pages directly on `posts` or `pages` methods as:\r\n\r\n```js\r\nwp.posts('id', n).revisions()\r\nwp.posts('type', type_name);\r\n```\r\n\r\nOn a future this can be also improved to pass a object with more includes like:\r\n\r\n```js\r\nwp.posts({\r\n  id: n,\r\n  type: type_name\r\n});\r\n```\r\n\r\nThis proposal should regard it might conflict with a way to set what you want from the posts, let's say you only want to fetch the comments:\r\n\r\n```js\r\nwp.posts({\r\n  type: type_name,\r\n  fetch: [ 'comments' ]\r\n});\r\n```\r\n\r\nThese ideas are inspired on my previous experience with Ember, and they're just suggestions which I'm sure you'll take the best decision if it's a good improvement or not for this api.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/172935971",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/121#issuecomment-172935971",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/121",
    "id": 172935971,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "1/19/2016",
    "updated_at": "2016-01-19T18:07:41Z",
    "body": "@leobalter Thank you for the suggestion! I've been thinking about ways to implement this and the object form, such as\r\n```js\r\nwp.posts({\r\n  id: 3782\r\n}).get( // ...\r\n```\r\nmay actually be fairly straightforward to implement. Basically, when a request object is instantiated, it will iterate through the keys of the provided object; if it has a method for that key, as there is an `.id()` chaining method to complement the `id` key, it would call that method with the value of the key in the object. I think I prefer this approach to passing in the key and variable as two separate parameters, because named arguments makes the most sense to me when there is significant specificity and creating a request object feels very general in comparison.\r\n\r\nThoughts?"
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/172938225",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/121#issuecomment-172938225",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/121",
    "id": 172938225,
    "user": {
     "login": "leobalter",
     "id": 301201,
     "avatar_url": "https://avatars.githubusercontent.com/u/301201?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/leobalter",
     "html_url": "https://github.com/leobalter",
     "followers_url": "https://api.github.com/users/leobalter/followers",
     "following_url": "https://api.github.com/users/leobalter/following{/other_user}",
     "gists_url": "https://api.github.com/users/leobalter/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/leobalter/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/leobalter/subscriptions",
     "organizations_url": "https://api.github.com/users/leobalter/orgs",
     "repos_url": "https://api.github.com/users/leobalter/repos",
     "events_url": "https://api.github.com/users/leobalter/events{/privacy}",
     "received_events_url": "https://api.github.com/users/leobalter/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "1/19/2016",
    "updated_at": "2016-01-19T18:14:01Z",
    "body": "the way you presented is great because it works better on the single responsibility pattern and it's less magical than jQuery-like methods we are used to (e.g.: `$.ajax`).\r\n\r\nYour approach seems as a great approach as you're working on a web application library."
   }
  ],
  "comments_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/121/comments",
  "milestone": null,
  "quicklink": "kadamwhite/wordpress-rest-api#121"
 },
 {
  "id": 121109474,
  "url": "https://github.com/kadamwhite/wordpress-rest-api/issues/114",
  "title": "CPT support is not working with api v2",
  "created_by": "alexvandervegt",
  "created_at": "12/8/2015",
  "body": "The following does not work with the v2 api:\r\n```\r\nwp.posts().type( type_name ): get posts of custom type type_name\r\n```\r\n\r\nWhen I read this article ( http://scottbolinger.com/custom-post-types-wp-api-v2/ ) it's clear why, the API endpoint changed.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/163035448",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/114#issuecomment-163035448",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/114",
    "id": 163035448,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "12/8/2015",
    "updated_at": "2015-12-08T22:16:12Z",
    "body": "Correct, this is a known issue. Thanks for reporting, in hoping to have a new release out by new year's with much more support for v2!"
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/163754565",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/114#issuecomment-163754565",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/114",
    "id": 163754565,
    "user": {
     "login": "alexvandervegt",
     "id": 3672692,
     "avatar_url": "https://avatars.githubusercontent.com/u/3672692?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/alexvandervegt",
     "html_url": "https://github.com/alexvandervegt",
     "followers_url": "https://api.github.com/users/alexvandervegt/followers",
     "following_url": "https://api.github.com/users/alexvandervegt/following{/other_user}",
     "gists_url": "https://api.github.com/users/alexvandervegt/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/alexvandervegt/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/alexvandervegt/subscriptions",
     "organizations_url": "https://api.github.com/users/alexvandervegt/orgs",
     "repos_url": "https://api.github.com/users/alexvandervegt/repos",
     "events_url": "https://api.github.com/users/alexvandervegt/events{/privacy}",
     "received_events_url": "https://api.github.com/users/alexvandervegt/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "12/10/2015",
    "updated_at": "2015-12-10T21:28:11Z",
    "body": "@jasonphillips got this work on his APIv2 branch:\r\n\r\nhttps://github.com/jasonphillips/wordpress-rest-api/tree/APIv2"
   }
  ],
  "comments_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/114/comments",
  "milestone": "V2 Compatibility",
  "quicklink": "kadamwhite/wordpress-rest-api#114"
 },
 {
  "id": 123550788,
  "url": "https://github.com/kadamwhite/wordpress-rest-api/issues/116",
  "title": "How can I upload attachments (e.g. images) using the media WP-API endpoint?",
  "created_by": "vtripolitakis",
  "created_at": "12/22/2015",
  "body": "Here's my code using request:\r\n\r\n```javascript\r\nvar request = require('request');\r\n\tvar fs = require('fs');\r\n\r\n\tvar formData = {\r\n  \t\tfile: fs.createReadStream('path_and_filename')\r\n\t};\r\n\r\n\trequest.post({url:media_endpoint_url, formData: formData}, \r\n\t\tfunction optionalCallback(err, httpResponse, body) {\t\r\n\t\t  if (err) {\r\n\t\t    return console.error('upload failed:', err);\r\n\t\t  }\r\n\t\t  console.log('Upload successful!  Server responded with:', body);\r\n\t\t})\r\n\t.auth('username','password',true);\r\n```",
  "state": "open",
  "comments": [],
  "comments_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/116/comments",
  "milestone": "V2 Compatibility",
  "quicklink": "kadamwhite/wordpress-rest-api#116"
 },
 {
  "id": 127853283,
  "url": "https://github.com/kadamwhite/wordpress-rest-api/issues/127",
  "title": "Determine how to handle embedded responses",
  "created_by": "kadamwhite",
  "created_at": "1/21/2016",
  "body": "When you make a request like `wp.posts().id( 42 ).embed()`, the returned JSON object will exactly mirror the API response you would get in the browser: that is to say, the response object will have an `._embedded: {}` object containing arrays of the embedded versions of linked author, media, and taxonomy term, etc resources.\r\n\r\nThere are two (and a half) ways we could proceed:\r\n\r\n**1:** Leave `_embedded` the way it is, do not mutate the response object in any way\r\n\r\n**2:** Mutate the response object to in-line the contents of `_embedded` into the response, so that e.g. instead of\r\n```js\r\n{\r\n  // ...\r\n  author: 3,\r\n  _embedded: {\r\n    author: [ {\r\n      id: 3,\r\n      name: 'Muscles McTouchdown',\r\n      // ...\r\n    }]\r\n  }\r\n}\r\n```\r\nyou would get simply\r\n```js\r\n{\r\n  // ...\r\n  author: {\r\n    id: 3,\r\n    name: 'Muscles McTouchdown',\r\n    // ...\r\n  }\r\n}\r\n```\r\nThis has the advantage of \"shielding\" the user from the nuances of embedded data, and they can easily determine whether they've got embedded data or not by *e.g.* inspecting the `typeof post.author`. That could be considered a downside as well.\r\n\r\n**2.5:** Implement some standardized way of defining post transformations, and make this configurable. I'm not 100% sure I'm comfortable heading down that road yet (it was previously discussed and back-burnered way back in #5) but it _would_ allow users to pick their own poison, at the expense of increasing library complexity.\r\n\r\nOpinions welcome!",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/173468481",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/127#issuecomment-173468481",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/127",
    "id": 173468481,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "1/21/2016",
    "updated_at": "2016-01-21T06:09:30Z",
    "body": "cc @tkellen as I know you in particular have talked through these questions with regard to JSON API: WP-API doesn't conform to that standard but I'm curious how you all handled embedding."
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/176812160",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/127#issuecomment-176812160",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/127",
    "id": 176812160,
    "user": {
     "login": "artoliukkonen",
     "id": 683856,
     "avatar_url": "https://avatars.githubusercontent.com/u/683856?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/artoliukkonen",
     "html_url": "https://github.com/artoliukkonen",
     "followers_url": "https://api.github.com/users/artoliukkonen/followers",
     "following_url": "https://api.github.com/users/artoliukkonen/following{/other_user}",
     "gists_url": "https://api.github.com/users/artoliukkonen/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/artoliukkonen/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/artoliukkonen/subscriptions",
     "organizations_url": "https://api.github.com/users/artoliukkonen/orgs",
     "repos_url": "https://api.github.com/users/artoliukkonen/repos",
     "events_url": "https://api.github.com/users/artoliukkonen/events{/privacy}",
     "received_events_url": "https://api.github.com/users/artoliukkonen/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "1/29/2016",
    "updated_at": "2016-01-29T15:27:02Z",
    "body": "I'd personally like **2** the most, since this is the way many other similar APIs work (Facebook, Contentful, etc). "
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/176822626",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/127#issuecomment-176822626",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/127",
    "id": 176822626,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "1/29/2016",
    "updated_at": "2016-01-29T15:37:52Z",
    "body": "After discussion with @artoliukkonen, @nb, @adamsilverstein & others at the [Day of REST hack day](), this is the proposed implementation:\r\n\r\nWithin WPRequest, specifically the `returnBody` method, pass the response body (if object) or response collection members (if array) through a transformation function (defaults to identity function). Provide an interface to specify a function to use at this step. Provide a method that could be used to inline values as described in **2**, above, as an opt-in response customization. "
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/176823108",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/127#issuecomment-176823108",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/127",
    "id": 176823108,
    "user": {
     "login": "tkellen",
     "id": 1004324,
     "avatar_url": "https://avatars.githubusercontent.com/u/1004324?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/tkellen",
     "html_url": "https://github.com/tkellen",
     "followers_url": "https://api.github.com/users/tkellen/followers",
     "following_url": "https://api.github.com/users/tkellen/following{/other_user}",
     "gists_url": "https://api.github.com/users/tkellen/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/tkellen/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/tkellen/subscriptions",
     "organizations_url": "https://api.github.com/users/tkellen/orgs",
     "repos_url": "https://api.github.com/users/tkellen/repos",
     "events_url": "https://api.github.com/users/tkellen/events{/privacy}",
     "received_events_url": "https://api.github.com/users/tkellen/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "1/29/2016",
    "updated_at": "2016-01-29T15:39:04Z",
    "body": "@kadamwhite There must be an existing client library that can do this transformation for you? If there isn't, I would consider writing one completely separate from this lib. Based on my understanding of the purpose of this library I would not expect it to do anything but pass API results back to me unchanged.\r\n\r\nIf you're concerned about making things more usable I would solve that problem by providing examples of how to use this other (potentially as-yet-to-be-created) client library to manage that sort of thing."
   }
  ],
  "comments_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/127/comments",
  "milestone": null,
  "quicklink": "kadamwhite/wordpress-rest-api#127"
 },
 {
  "id": 36917044,
  "url": "https://github.com/kadamwhite/wordpress-rest-api/issues/62",
  "title": "Support mixing into or processing response data?",
  "created_by": "kadamwhite",
  "created_at": "7/1/2014",
  "body": "It's been suggested that we mix in Underscore/Lodash functions to collection responses (#5), and it may be beneficial to provide a way to process response data objects into more structured models. (This library does not actually provide models: we should *not* presume how users want to structure those data models, but it might be convenient to give them the option to do so.)\r\n\r\nThis issue is for brainstorming an interface for providing these models. It may not be feasible, given the variety of data types that you can retrieve even from a single endpoint (e.g. `/posts` and its descendants yields Posts, Post Collections, Comments, Revisions, and Types).",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/51402491",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/62#issuecomment-51402491",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/62",
    "id": 51402491,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "8/6/2014",
    "updated_at": "2014-08-06T21:49:56Z",
    "body": "A potential consumer-facing interface for this was outlined as Option 2A in #76"
   }
  ],
  "comments_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/62/comments",
  "milestone": null,
  "quicklink": "kadamwhite/wordpress-rest-api#62"
 },
 {
  "id": 36773365,
  "url": "https://github.com/kadamwhite/wordpress-rest-api/issues/51",
  "title": "Add method to bind new endpoint handlers",
  "created_by": "kadamwhite",
  "created_at": "6/30/2014",
  "body": "Per @rmccue, providers of the WP-API can expose new query endpoints and we should acocunt for those.\r\n\r\n> [6/30/14, 3:01:29 AM] Ryan McCue:\r\n> So e.g. for WooCommerce, implementing /products as a shorthand for /posts?type=products\r\n\r\nThe option we discussed was to add a `.customEndpoint` method, in the manner of `.registerType` (see #7); however, the other option would be to make a function on WP that could be used to define a new constructor and specify the types at instantiation. Worth discussing. cc @carldanley ",
  "state": "open",
  "comments": [],
  "comments_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/51/comments",
  "milestone": "Polish",
  "quicklink": "kadamwhite/wordpress-rest-api#51"
 },
 {
  "id": 36822261,
  "url": "https://github.com/kadamwhite/wordpress-rest-api/issues/56",
  "title": "Add .meta handler for posts",
  "created_by": "kadamwhite",
  "created_at": "6/30/2014",
  "body": "The `/posts` endpoint provides two routes for interacting with post meta values:\r\n\r\n* `/posts/<id>/meta`\r\n* `/posts/<id>/meta/<mid>`\r\n\r\nBoth of these depend on authentication, so that should be taken care of (and documented, see #33) before we implement this.",
  "state": "open",
  "comments": [],
  "comments_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/56/comments",
  "milestone": "V2 Compatibility",
  "quicklink": "kadamwhite/wordpress-rest-api#56"
 },
 {
  "id": 34897626,
  "url": "https://github.com/kadamwhite/wordpress-rest-api/issues/5",
  "title": "Implement lo-dash/underscore support for return values",
  "created_by": "carldanley",
  "created_at": "6/3/2014",
  "body": "I had the idea of extending the return values to support lo-dash or underscore so the developer could make use of sorting functions (among everything else these libraries support).\r\n\r\nThough, after talking with @kadamwhite - I feel that we should make this as lightweight as possible and let the developer choose how they want to take action on the return results.\r\n\r\nStill opening the Issue for discussion on this topic.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/46786567",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/5#issuecomment-46786567",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/5",
    "id": 46786567,
    "user": {
     "login": "tbranyen",
     "id": 181635,
     "avatar_url": "https://avatars.githubusercontent.com/u/181635?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/tbranyen",
     "html_url": "https://github.com/tbranyen",
     "followers_url": "https://api.github.com/users/tbranyen/followers",
     "following_url": "https://api.github.com/users/tbranyen/following{/other_user}",
     "gists_url": "https://api.github.com/users/tbranyen/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/tbranyen/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/tbranyen/subscriptions",
     "organizations_url": "https://api.github.com/users/tbranyen/orgs",
     "repos_url": "https://api.github.com/users/tbranyen/repos",
     "events_url": "https://api.github.com/users/tbranyen/events{/privacy}",
     "received_events_url": "https://api.github.com/users/tbranyen/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "6/22/2014",
    "updated_at": "2014-06-22T17:07:51Z",
    "body": "I do this with LayoutManager when you request a collection of child views.  For instance:\r\n\r\n``` javascript\r\n// The return value from `getViews` is a wrapped Lo-Dash/Underscore instance.\r\nvar mainView = parent.getViews().find(function(view) {\r\n  return view.name === \"main\";\r\n});\r\n```"
   }
  ],
  "comments_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/5/comments",
  "milestone": null,
  "quicklink": "kadamwhite/wordpress-rest-api#5"
 },
 {
  "id": 51673909,
  "url": "https://github.com/kadamwhite/wordpress-rest-api/issues/95",
  "title": "Get taxonomy by slug",
  "created_by": "PanMan",
  "created_at": "12/11/2014",
  "body": "In the docs (frontpage) it says:\r\n\r\n    wp.taxonomies().taxonomy( 'taxonomy_name' ).term( termIdentifier ): get the term with slug or ID termIdentifier from the taxonomy taxonomy_name\r\n\r\nThis works with the ID, but not with the slug :(. Is this something that changed?\r\n\r\nHOST/wp-json/taxonomies/post_tag/terms/42 works\r\nHOST/wp-json/taxonomies/post_tag/terms/sociaal-ondernemerschap doesn't",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/66617842",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/95#issuecomment-66617842",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/95",
    "id": 66617842,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "12/11/2014",
    "updated_at": "2014-12-11T13:22:32Z",
    "body": "This may just have been a mistake on my part, I can't find a prior version of the API that did support this—I'll look into it today"
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/66618826",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/95#issuecomment-66618826",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/95",
    "id": 66618826,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "12/11/2014",
    "updated_at": "2014-12-11T13:31:54Z",
    "body": "This is definitely not supported at present, thank you for the catch. I believe I will add a `.slug()` method to the Taxonomies query builder to allow terms to be provided by slug; however, this depends on WP-API/WP-API#347, because the version of the API in the plugin directory does not support filtering taxonomy collection endpoints. I am not sure how to proceed in releasing this feature given that it is not in the officially-released version of the plugin.\r\n\r\nWhat version are you using? You can try this query; in the latest \"master\" version of the plugin, it will return an array with a single element:\r\n```\r\nHOST/wp-json/taxonomies/post_tag/terms?filter[slug]=sociaal-ondernemerschap\r\n```"
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/66618888",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/95#issuecomment-66618888",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/95",
    "id": 66618888,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "12/11/2014",
    "updated_at": "2014-12-11T13:32:33Z",
    "body": "c.f. update: the actual PR that landed this change was WP-API/WP-API#401, not 347"
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/66622116",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/95#issuecomment-66622116",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/95",
    "id": 66622116,
    "user": {
     "login": "PanMan",
     "id": 978501,
     "avatar_url": "https://avatars.githubusercontent.com/u/978501?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/PanMan",
     "html_url": "https://github.com/PanMan",
     "followers_url": "https://api.github.com/users/PanMan/followers",
     "following_url": "https://api.github.com/users/PanMan/following{/other_user}",
     "gists_url": "https://api.github.com/users/PanMan/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/PanMan/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/PanMan/subscriptions",
     "organizations_url": "https://api.github.com/users/PanMan/orgs",
     "repos_url": "https://api.github.com/users/PanMan/repos",
     "events_url": "https://api.github.com/users/PanMan/events{/privacy}",
     "received_events_url": "https://api.github.com/users/PanMan/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "12/11/2014",
    "updated_at": "2014-12-11T13:59:53Z",
    "body": "The filter by slug is what I had in my code (and which I think worked last week?), but now it returns all items, and doesn't filter."
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/66633406",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/95#issuecomment-66633406",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/95",
    "id": 66633406,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "12/11/2014",
    "updated_at": "2014-12-11T15:18:33Z",
    "body": "What version of the WP-API plugin are you using?"
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/66659363",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/95#issuecomment-66659363",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/95",
    "id": 66659363,
    "user": {
     "login": "PanMan",
     "id": 978501,
     "avatar_url": "https://avatars.githubusercontent.com/u/978501?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/PanMan",
     "html_url": "https://github.com/PanMan",
     "followers_url": "https://api.github.com/users/PanMan/followers",
     "following_url": "https://api.github.com/users/PanMan/following{/other_user}",
     "gists_url": "https://api.github.com/users/PanMan/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/PanMan/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/PanMan/subscriptions",
     "organizations_url": "https://api.github.com/users/PanMan/orgs",
     "repos_url": "https://api.github.com/users/PanMan/repos",
     "events_url": "https://api.github.com/users/PanMan/events{/privacy}",
     "received_events_url": "https://api.github.com/users/PanMan/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "12/11/2014",
    "updated_at": "2014-12-11T17:52:50Z",
    "body": "The latest stable from wordpress.org, 1.1.1"
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/66664712",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/95#issuecomment-66664712",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/95",
    "id": 66664712,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "12/11/2014",
    "updated_at": "2014-12-11T18:29:28Z",
    "body": "That makes sense. Filtering for taxonomy collections is not included in 1.1.1, so there won't be any way to get at a specific term until a new plugin version is released; I will add the `.slug` convenience method at that point.\r\n\r\nThe best I can offer is to filter down the returned collection:\r\n```js\r\nwp.tags().then(function(tags) {\r\n  return _.findWhere(tags, {\r\n    slug: 'term-slug'\r\n  });\r\n});\r\n```\r\nIt is not super efficient to request all terms each time, so you may want to request all of them and cache that collection locally in a variable or an LRU cache to speed up the retrieval."
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/66693239",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/95#issuecomment-66693239",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/95",
    "id": 66693239,
    "user": {
     "login": "PanMan",
     "id": 978501,
     "avatar_url": "https://avatars.githubusercontent.com/u/978501?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/PanMan",
     "html_url": "https://github.com/PanMan",
     "followers_url": "https://api.github.com/users/PanMan/followers",
     "following_url": "https://api.github.com/users/PanMan/following{/other_user}",
     "gists_url": "https://api.github.com/users/PanMan/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/PanMan/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/PanMan/subscriptions",
     "organizations_url": "https://api.github.com/users/PanMan/orgs",
     "repos_url": "https://api.github.com/users/PanMan/repos",
     "events_url": "https://api.github.com/users/PanMan/events{/privacy}",
     "received_events_url": "https://api.github.com/users/PanMan/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "12/11/2014",
    "updated_at": "2014-12-11T21:36:16Z",
    "body": "I think I'll update the WP-API on the server. Thnx for your input! "
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/173453422",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/95#issuecomment-173453422",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/95",
    "id": 173453422,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "1/21/2016",
    "updated_at": "2016-01-21T05:07:10Z",
    "body": "In the intervening year, this has been broken again by the v2 beta upgrades: WP-API/WP-API#924 identifies that `filter` is not currently supported on the `/categories` or `/tags` endpoints.\r\n\r\nWP-API/WP-API#2065 has been opened to identify whether this will ever be reinstated; in the meantime, #126 will add a demonstration of using the `?search` parameter to _slightly_ more efficiently retrieve a specific term by slug (basically the same \"get them all and search for the one you want in the response\" approach detailed above, but with less overhead due to the narrowing effect of `?search=the-slug`)."
   }
  ],
  "comments_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/95/comments",
  "milestone": "V2 Compatibility",
  "quicklink": "kadamwhite/wordpress-rest-api#95"
 },
 {
  "id": 39341678,
  "url": "https://github.com/kadamwhite/wordpress-rest-api/issues/74",
  "title": "Prototype how to populate route templates from top-level routes endpoint",
  "created_by": "kadamwhite",
  "created_at": "8/2/2014",
  "body": "One major point of discussion at WCNYC surrounding the API is how to handle discoverability, as it was recommended to consider templated URLs (which are common with SAAS-provided APIs) to be an anti-pattern when the WP ReST API can be considered to be more of an API *builder* for individual sites than an API in and of itself. In a polymorphic world of individually-configured and customized WordPress installs, having non-templated paths that are all discovered from a root endpoint is the solution deemed most flexible and least likely to paint us into a corner.\r\n\r\nSignificant drawbacks to this approach:\r\n\r\n- A first request is *always* needed: There is no way to query for a resource without first interrogating the root endpoint for location information. You can safely assume you know how things are set up in most cases, but there's no way around this added request overhead if you're requesting content from a third-party site for the first time.\r\n\r\n- To avoid having to make a first request for *all* subsequent requests, the information from that request (an object defining available endpoints, from which all following requests will be derived) must be cached somehow. This is of minor concern in server-side applications, which can cache in-memory within the process, in session storage, or persistently in a database; but for client applications this data would need to be persisted in local storage or a similar client-side cache in order to avoid needing to be requested on every page load.\r\n\r\nI find this concept appealing from the standpoint of conceptual flexibility, and in the way it forces you to confront resources very specifically as members of collections, but I still can't but think it would be extremely frustrating and limiting in implementation. I want to study more APIs and figure out if there's anything out there operating in the fashion described by @maxcutler, to evaluate the best way to work around these limitations and alleviate my concerns.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/176836888",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/74#issuecomment-176836888",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/74",
    "id": 176836888,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "1/29/2016",
    "updated_at": "2016-01-29T15:59:44Z",
    "body": "We can take inspiration from how @adamsilverstein has handled this in WP-API/client-js"
   }
  ],
  "comments_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/74/comments",
  "milestone": null,
  "quicklink": "kadamwhite/wordpress-rest-api#74"
 },
 {
  "id": 129893577,
  "url": "https://github.com/kadamwhite/wordpress-rest-api/issues/140",
  "title": "Can we call custom URL via node cilent?",
  "created_by": "andreipot",
  "created_at": "1/29/2016",
  "body": "Hello @kadamwhite \r\nI'm using **memberpress**(https://www.memberpress.com/) which provides REST api as well. I've installed WP API v2 and on node side i'm using your client.\r\nHowever, member press API follows this format\r\nwp-json/mp/v1/members/:id\r\nwhereas wordpress-rest-client follows this  format\r\nwp-json/wp/v2/***\r\nAt the moment, there is no way to point memberpress apis from your client, I can use HTTP request then there is authentication. \r\nis it possible for me to call memberpress rest api using this node client?\r\n\r\nI think if we can manage to call custom URLs (not via post /page/ taxonomies ) then this is will be really awesome!\r\n\r\nthanks,\r\nAndrei",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/177208374",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/140#issuecomment-177208374",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/140",
    "id": 177208374,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "1/30/2016",
    "updated_at": "2016-01-30T15:22:10Z",
    "body": "@andreipot As discussed in #138, there's currently not good support for this. The interface I have been hoping to implement would look like this:\r\n\r\n```js\r\nvar wp = require( 'wordpress-rest-api' ).site( 'http://your-site.com/wp-json' );\r\n\r\nwp.members = wp.endpoint({\r\n  collection: 'members',\r\n  namespace: 'mp',\r\n  version: 'v1'\r\n});\r\n\r\nwp.members().id( 7 )._renderURI(); // http://your-site.com/wp-json/mp/v1/members/7\r\n```\r\n\r\nI'd be curious for your thoughts about this interface."
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/177214466",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/140#issuecomment-177214466",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/140",
    "id": 177214466,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "1/30/2016",
    "updated_at": "2016-01-30T15:46:32Z",
    "body": "After discussion with @rmccue the string `mp/v1` taken as a whole is the \"namespace\"; I have opened issue #141 to track removing the now-obsolete \"version\" method. Additionally, \"base\" is a more generic property name for defining a collection endpoint, in the event that a REST endpoint is created for a collection-less resource.\r\n\r\nIn light of these findings then the `.endpoint` method would be imagined to work as follows:\r\n```js\r\nwp.members = wp.endpoint({\r\n  base: 'members',\r\n  namespace: 'mp/v1'\r\n});\r\n```"
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/177331108",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/140#issuecomment-177331108",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/140",
    "id": 177331108,
    "user": {
     "login": "andreipot",
     "id": 11772237,
     "avatar_url": "https://avatars.githubusercontent.com/u/11772237?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/andreipot",
     "html_url": "https://github.com/andreipot",
     "followers_url": "https://api.github.com/users/andreipot/followers",
     "following_url": "https://api.github.com/users/andreipot/following{/other_user}",
     "gists_url": "https://api.github.com/users/andreipot/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/andreipot/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/andreipot/subscriptions",
     "organizations_url": "https://api.github.com/users/andreipot/orgs",
     "repos_url": "https://api.github.com/users/andreipot/repos",
     "events_url": "https://api.github.com/users/andreipot/events{/privacy}",
     "received_events_url": "https://api.github.com/users/andreipot/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "1/30/2016",
    "updated_at": "2016-01-30T23:23:36Z",
    "body": "@kadamwhite  Awesome, I will test it and let you know.\r\nI think what you did is right."
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/177332270",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/140#issuecomment-177332270",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/140",
    "id": 177332270,
    "user": {
     "login": "andreipot",
     "id": 11772237,
     "avatar_url": "https://avatars.githubusercontent.com/u/11772237?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/andreipot",
     "html_url": "https://github.com/andreipot",
     "followers_url": "https://api.github.com/users/andreipot/followers",
     "following_url": "https://api.github.com/users/andreipot/following{/other_user}",
     "gists_url": "https://api.github.com/users/andreipot/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/andreipot/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/andreipot/subscriptions",
     "organizations_url": "https://api.github.com/users/andreipot/orgs",
     "repos_url": "https://api.github.com/users/andreipot/repos",
     "events_url": "https://api.github.com/users/andreipot/events{/privacy}",
     "received_events_url": "https://api.github.com/users/andreipot/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "1/30/2016",
    "updated_at": "2016-01-30T23:24:35Z",
    "body": "@kadamwhite  for custom query request, rather than packing them as functions like wp.posts(), we'd rather have it accept custom URL led by namespace and base."
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/177438957",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/140#issuecomment-177438957",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/140",
    "id": 177438957,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "1/31/2016",
    "updated_at": "2016-01-31T08:51:00Z",
    "body": "@andreipot can you elaborate or provide an example to show what you mean?"
   }
  ],
  "comments_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/140/comments",
  "milestone": null,
  "quicklink": "kadamwhite/wordpress-rest-api#140"
 },
 {
  "id": 96219360,
  "url": "https://github.com/kadamwhite/wordpress-rest-api/issues/102",
  "title": "OAuth support",
  "created_by": "CaptainN",
  "created_at": "7/20/2015",
  "body": "Hi!\r\n\r\nWhat's involved with making oauth work (either oauth1, for which there is a WP API plugin plugin, or OAuth 2 for which there is a standalone plugin) with this plugin instead of standard HTTP authentication?\r\n\r\nKevin N.",
  "state": "open",
  "comments": [
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/123146916",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/102#issuecomment-123146916",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/102",
    "id": 123146916,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "7/21/2015",
    "updated_at": "2015-07-21T04:02:18Z",
    "body": "@CaptainN OAuth isn't currently supported by this library -- the basic process, if I understand it (and I'll be honest, I've never used OAuth successfully without confusion) is that you'd use the plugin to generate a key, then we'd need to add a facility to this API to make a request with that key to get the token used to authenticate.\r\n\r\nIt's definitely something I'd like to add, but I haven't had the time to get to it yet and adding media support (and more robustly supporting/testing against the WP-API 2.0 betas) are the priorities right now. If you've got OAuth experience, or interest, I'd love to get some help putting this in though"
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/150727346",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/102#issuecomment-150727346",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/102",
    "id": 150727346,
    "user": {
     "login": "mzalewski",
     "id": 1389893,
     "avatar_url": "https://avatars.githubusercontent.com/u/1389893?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/mzalewski",
     "html_url": "https://github.com/mzalewski",
     "followers_url": "https://api.github.com/users/mzalewski/followers",
     "following_url": "https://api.github.com/users/mzalewski/following{/other_user}",
     "gists_url": "https://api.github.com/users/mzalewski/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/mzalewski/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/mzalewski/subscriptions",
     "organizations_url": "https://api.github.com/users/mzalewski/orgs",
     "repos_url": "https://api.github.com/users/mzalewski/repos",
     "events_url": "https://api.github.com/users/mzalewski/events{/privacy}",
     "received_events_url": "https://api.github.com/users/mzalewski/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/23/2015",
    "updated_at": "2015-10-24T00:27:26Z",
    "body": "I doubt anyone has used OAuth without confusion :) I've managed to get OAuth working though, so I should be able to help out"
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/150743351",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/102#issuecomment-150743351",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/102",
    "id": 150743351,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/23/2015",
    "updated_at": "2015-10-24T02:44:12Z",
    "body": "@mzalewski if you're interested, that would be excellent in the extreme!"
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/151894282",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/102#issuecomment-151894282",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/102",
    "id": 151894282,
    "user": {
     "login": "mzalewski",
     "id": 1389893,
     "avatar_url": "https://avatars.githubusercontent.com/u/1389893?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/mzalewski",
     "html_url": "https://github.com/mzalewski",
     "followers_url": "https://api.github.com/users/mzalewski/followers",
     "following_url": "https://api.github.com/users/mzalewski/following{/other_user}",
     "gists_url": "https://api.github.com/users/mzalewski/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/mzalewski/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/mzalewski/subscriptions",
     "organizations_url": "https://api.github.com/users/mzalewski/orgs",
     "repos_url": "https://api.github.com/users/mzalewski/repos",
     "events_url": "https://api.github.com/users/mzalewski/events{/privacy}",
     "received_events_url": "https://api.github.com/users/mzalewski/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/28/2015",
    "updated_at": "2015-10-28T16:05:54Z",
    "body": "Getting there slowly, I've got OAuth 1.0a working now. The only issue is that it requires user/browser authorization, so haven't quite figured out the best way to handle that. At the moment, I'm assuming that part will be done by the time the API is called so we already have an access token - but I have example code that does the actual authentication. \r\n\r\nI'm planning to push it up tomorrow anyway so I'll let you know when it's up"
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/151907774",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/102#issuecomment-151907774",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/102",
    "id": 151907774,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/28/2015",
    "updated_at": "2015-10-28T16:53:08Z",
    "body": ":+1: "
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/152134583",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/102#issuecomment-152134583",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/102",
    "id": 152134583,
    "user": {
     "login": "mzalewski",
     "id": 1389893,
     "avatar_url": "https://avatars.githubusercontent.com/u/1389893?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/mzalewski",
     "html_url": "https://github.com/mzalewski",
     "followers_url": "https://api.github.com/users/mzalewski/followers",
     "following_url": "https://api.github.com/users/mzalewski/following{/other_user}",
     "gists_url": "https://api.github.com/users/mzalewski/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/mzalewski/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/mzalewski/subscriptions",
     "organizations_url": "https://api.github.com/users/mzalewski/orgs",
     "repos_url": "https://api.github.com/users/mzalewski/repos",
     "events_url": "https://api.github.com/users/mzalewski/events{/privacy}",
     "received_events_url": "https://api.github.com/users/mzalewski/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/29/2015",
    "updated_at": "2015-10-29T10:06:55Z",
    "body": "I've added OAuth 1.0A support to my fork here: \r\nhttps://github.com/mzalewski/wordpress-rest-api\r\n\r\nI'm not 100% happy with it yet, but should hopefully give everyone a basic understanding of the direction I'm going. I've added some example code to the readme, so (hopefully) should be easy to understand if anyone wants to try it out"
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/152225146",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/102#issuecomment-152225146",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/102",
    "id": 152225146,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "10/29/2015",
    "updated_at": "2015-10-29T15:58:15Z",
    "body": "Thanks, @mzalewski , I will check it out next week. I appreciate your sharing your efforts!"
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/173039856",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/102#issuecomment-173039856",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/102",
    "id": 173039856,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "1/19/2016",
    "updated_at": "2016-01-20T01:02:20Z",
    "body": "I discussed the currently-supported OAuth flows with @rmccue today in slack; transcript below\r\n\r\n> \r\n> - rmccue [7:35 PM]  @kadamwhite: Go ahead and ask :simple_smile:\r\n> - kadamwhite [7:37 PM]  @rmccue: :) Thanks. First off, is there any way, with the current oauth infrastructure, to have a completely server-side oauth process; i.e., without any need for the user to open a browser, assuming the app has previously had a key generated for it?\r\n> - rmccue [7:38 PM]  Using OAuth, not really\r\n>   [7:38] That's typically called \"one-legged\" OAuth, and the way it works is by having a pre-authorised key/secret\r\n>   [7:38] Technically possible with the plugin, but you'd need to write an addon plugin to add UI for it\r\n> - kadamwhite [7:39 PM]  hmm. ok. So there's not really any solution right now where a server-side app could authenticate with the wp-api, even if that app has previously been authorized and the user has entered their credentials into something accessible to the app — true?\r\n>   [7:39] I ask because the #1 request i've gotten for the wp-api node client was oauth, but it sounds like that isn't really possible and that's frustrating.\r\n> - rmccue [7:42 PM]  You could through an initial browser integration\r\n>   [7:42] If you have a look at the example client, that spits out the key/secret at the end of the process, so they could run that then just copy that across\r\n>   [7:43] But generally no, there's no server-server authentication right now\r\n>   [7:43] The #core-passwords team is working on \"app passwords\", which will help with that\r\n>   [7:44] http://oauth1.wp-api.org/docs/advanced/Desktop.html may also help\r\n> - kadamwhite [7:44 PM]  how long-lived are the tokens?\r\n> - rmccue [7:47 PM]  (Sorry, was just making a :coffee: )\r\n>   [7:48] Currently, they do not expire\r\n>   [7:48] That might change in the future, but 1.0a doesn't have a \"refresh\" mechanism, so you'd need to re-auth from scratch\r\n>   [7:48] The plugin also currently doesn't recognise if a client has already been authorised, which might change\r\n> - kadamwhite [7:52 PM]  > so you'd need to re-auth from scratch in the event that you lose the token, you mean? given that it won't expire on its own. I'm also uncertain about the nuance of \"the plugin doesn't currently recognize if a client has already been authorized\"\r\n> - rmccue [7:52 PM]  If the plugin ​_did_​ expire tokens\r\n> - kadamwhite [7:52 PM]  ah, i see\r\n> - rmccue [7:52 PM]  Potentially could in the future, but the flow would suck\r\n> - kadamwhite [7:52 PM]  nods\r\n> - rmccue [7:53 PM]  And basically, when you send off an authorisation request to some OAuth providers, they'll tell you if you've already been given a token/secret for the user, and just give that back to you\r\n>   [7:53] The plugin currently doesn't do that, so you could end up with multiple tokens per user for the same app\r\n> - kadamwhite [7:54 PM]  if they request more than one, you mean?\r\n> - rmccue [7:54 PM]  That'll probably change, since there's no reason to do that\r\n> - kadamwhite [7:54 PM]  if you re-use a token it should work?\r\n> - rmccue [7:54 PM]  Yep\r\n>   [7:54] Some client apps do the lazy thing and don't store user state\r\n>   [7:54] They just reauthorise every time\r\n> - kadamwhite [7:55 PM]  So, to recap: the best-case scenario for node-driven applications that wish to auth via oauth 1.0a would be,\r\n>   1. User creates an app secret etc using the oauth plugin's wp-admin screen under the \"users\" menu\r\n>   2. App requests authentication; user is required to open a browser in some capacity in order to enter their credentials, there is no way for any purely server-side logic to inject those into the process without user interaction\r\n>   3. Browser flow could end by displaying a token to the user that they can copy into their app's configuration file\r\n>   4. App could henceforth use that token to auth directly, just for that user\r\n>   missing anything?\r\n> - rmccue [7:56 PM]  Nope, sounds right to me\r\n> - kadamwhite [7:56 PM]  I'm glad to hear there's a group working on it because that's less than ideal, but I get how we're in this situation. Thanks for helping walk me through it.\r\n> - rmccue [7:56 PM]  However, you ​_could_​ build a small plugin that essentially does 1-3 on the server\r\n> - kadamwhite [7:56 PM]  howso…? thought you'd said that wasn't an option\r\n> - rmccue [7:56 PM]  Essentially, it'd create the token and authorise it automatically\r\n>   [7:57] https://wordpress.slack.com/archives/core-restapi/p1453250332004937\r\n> - kadamwhite [7:57 PM]  hmm, which server are we talking about, wp's or the app's?\r\n> - rmccue [7:57 PM]  WP's\r\n> - kadamwhite [7:57 PM]  ahh I misunderstood\r\n> - rmccue [7:57 PM]  :simple_smile:\r\n>   [7:57] Yeah, should have said \"provider\" instead\r\n> - kadamwhite [7:57 PM]  I'll probably want to pick your brain about that as well, then, because that would be of major benefit\r\n> - rmccue [7:57 PM]  Indeed\r\n> - kadamwhite [7:58 PM]  for now, we're ostensibly waiting for company to come over (I have my doubts), so I need to run. Thanks for your time, Ryan!"
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/173071887",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/102#issuecomment-173071887",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/102",
    "id": 173071887,
    "user": {
     "login": "mzalewski",
     "id": 1389893,
     "avatar_url": "https://avatars.githubusercontent.com/u/1389893?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/mzalewski",
     "html_url": "https://github.com/mzalewski",
     "followers_url": "https://api.github.com/users/mzalewski/followers",
     "following_url": "https://api.github.com/users/mzalewski/following{/other_user}",
     "gists_url": "https://api.github.com/users/mzalewski/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/mzalewski/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/mzalewski/subscriptions",
     "organizations_url": "https://api.github.com/users/mzalewski/orgs",
     "repos_url": "https://api.github.com/users/mzalewski/repos",
     "events_url": "https://api.github.com/users/mzalewski/events{/privacy}",
     "received_events_url": "https://api.github.com/users/mzalewski/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "1/19/2016",
    "updated_at": "2016-01-20T03:07:10Z",
    "body": "That server-side plugin sounds interesting, would you consider that? \r\n\r\noAuth 2.0 appears offer a few more options though - combined with the oAuth 2 plugin on WP.org (https://wp-oauth.com/knowledge-base/grant-types/), it might be possible to connect via oAuth without requiring a redirect. "
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/173075422",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/102#issuecomment-173075422",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/102",
    "id": 173075422,
    "user": {
     "login": "mzalewski",
     "id": 1389893,
     "avatar_url": "https://avatars.githubusercontent.com/u/1389893?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/mzalewski",
     "html_url": "https://github.com/mzalewski",
     "followers_url": "https://api.github.com/users/mzalewski/followers",
     "following_url": "https://api.github.com/users/mzalewski/following{/other_user}",
     "gists_url": "https://api.github.com/users/mzalewski/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/mzalewski/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/mzalewski/subscriptions",
     "organizations_url": "https://api.github.com/users/mzalewski/orgs",
     "repos_url": "https://api.github.com/users/mzalewski/repos",
     "events_url": "https://api.github.com/users/mzalewski/events{/privacy}",
     "received_events_url": "https://api.github.com/users/mzalewski/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "1/19/2016",
    "updated_at": "2016-01-20T03:37:14Z",
    "body": "What about simply exposing a way to hook into the Auth function and passing off authentication to third-party code/modules?\r\n\r\nIt could be the easiest option given the number of possible uses of this plugin (eg: web-based, desktop, library)"
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/173109806",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/102#issuecomment-173109806",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/102",
    "id": 173109806,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "1/20/2016",
    "updated_at": "2016-01-20T06:40:00Z",
    "body": "Oauth support's the most common question we've gotten, so ideally I'd like to have something set up within the package itself. Lots of ways to move toward that, though! I finally reviewed the implementation you linked to, it's interesting -- could you walk me through the process of using it within your application's code?"
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/173469076",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/102#issuecomment-173469076",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/102",
    "id": 173469076,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "1/21/2016",
    "updated_at": "2016-01-21T06:14:06Z",
    "body": "@mzalewski forgot to respond to the other part of your comment: I would 100% be interested in an add-on to provide https://wp-oauth.com/ compatibility for this client library, but I'm hesitant to implement support for a non-WP-native, paid plugin into the core wordpress-rest-api package. I feel it would be better to hold out for the core-passwords team's app passwords, or to investigate writing a companion WP plugin to extend the 1.0a server to give access to the node client in the way discussed in the chat above."
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/173475680",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/102#issuecomment-173475680",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/102",
    "id": 173475680,
    "user": {
     "login": "mzalewski",
     "id": 1389893,
     "avatar_url": "https://avatars.githubusercontent.com/u/1389893?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/mzalewski",
     "html_url": "https://github.com/mzalewski",
     "followers_url": "https://api.github.com/users/mzalewski/followers",
     "following_url": "https://api.github.com/users/mzalewski/following{/other_user}",
     "gists_url": "https://api.github.com/users/mzalewski/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/mzalewski/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/mzalewski/subscriptions",
     "organizations_url": "https://api.github.com/users/mzalewski/orgs",
     "repos_url": "https://api.github.com/users/mzalewski/repos",
     "events_url": "https://api.github.com/users/mzalewski/events{/privacy}",
     "received_events_url": "https://api.github.com/users/mzalewski/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "1/21/2016",
    "updated_at": "2016-01-21T06:47:35Z",
    "body": "Fair enough - it definitely makes sense to support the official WP authentication methods out of the box.\r\n\r\nI'm happy to walk through my fork, but it's been a pretty busy week - I'll free up some time to go through it properly within the next 1-2 days\r\n\r\nI'll give a basic overview (from memory):\r\nI've put most of the oAuth handling code into the oAuth1.js file, with some changes to WP-Request.js which passes URL signing off to the oAuth object.\r\n\r\nBoth Client ID and Client Secret are required parameters and are configured in WP. These, along with the  oAuth URLs provided by the API, are used to construct an OAuth object ( new WP.OAuth ) \r\n\r\n###### oauth.getAuthorizeUrl\r\nSends a request WP API and receives a \"request\" token which is used to sign the Authorize URL (URL provided to promise callback).\r\n\r\n###### User Redirect\r\nThe User is then required to log in on the site at the provided URL\r\n\r\n###### oauth.getAccessToken\r\nThe getAccessToken function can then be used by passing the OAuth Token and verification code. This function is responsible for sending the access/verify tokens to the server, and finally receiving an authenticated token. \r\n\r\nOnce we have that authenticated token, it is stored for future use and will be used to authenticate outgoing requests. \r\n\r\n\r\n\r\n\r\nIt uses the OAuth Node (node-oauth) library behind the scenes, so the documentation there may help - the code I've written simply wraps node-oauth and attempts to integrate it into your functions.\r\n\r\nHopefully that helps understand what I've done. \r\n\r\nI also came across this while working on it: http://passportjs.org/ - It doesn't solve any of the issues around redirecting users, but from what I can tell it is a popular library for working with oAuth and could possibly save a lot of time? \r\n"
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/173476038",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/102#issuecomment-173476038",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/102",
    "id": 173476038,
    "user": {
     "login": "mzalewski",
     "id": 1389893,
     "avatar_url": "https://avatars.githubusercontent.com/u/1389893?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/mzalewski",
     "html_url": "https://github.com/mzalewski",
     "followers_url": "https://api.github.com/users/mzalewski/followers",
     "following_url": "https://api.github.com/users/mzalewski/following{/other_user}",
     "gists_url": "https://api.github.com/users/mzalewski/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/mzalewski/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/mzalewski/subscriptions",
     "organizations_url": "https://api.github.com/users/mzalewski/orgs",
     "repos_url": "https://api.github.com/users/mzalewski/repos",
     "events_url": "https://api.github.com/users/mzalewski/events{/privacy}",
     "received_events_url": "https://api.github.com/users/mzalewski/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "1/21/2016",
    "updated_at": "2016-01-21T06:49:03Z",
    "body": "Sorry if it's confusing, even I am having trouble reading what I've just written. \r\nI'll see if I can put together a diagram which should explain things more clearly"
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/173476285",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/102#issuecomment-173476285",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/102",
    "id": 173476285,
    "user": {
     "login": "kadamwhite",
     "id": 442115,
     "avatar_url": "https://avatars.githubusercontent.com/u/442115?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/kadamwhite",
     "html_url": "https://github.com/kadamwhite",
     "followers_url": "https://api.github.com/users/kadamwhite/followers",
     "following_url": "https://api.github.com/users/kadamwhite/following{/other_user}",
     "gists_url": "https://api.github.com/users/kadamwhite/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/kadamwhite/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/kadamwhite/subscriptions",
     "organizations_url": "https://api.github.com/users/kadamwhite/orgs",
     "repos_url": "https://api.github.com/users/kadamwhite/repos",
     "events_url": "https://api.github.com/users/kadamwhite/events{/privacy}",
     "received_events_url": "https://api.github.com/users/kadamwhite/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "1/21/2016",
    "updated_at": "2016-01-21T06:51:07Z",
    "body": "@mzalewski no problem whatsoever, I appreciate it. I'm going to have some concerted time to work on this in conjunction with the WP-API team at the feelingrestful.com event next week, so if you get a chance to go through it in more detail by Wednesday or so that'd be very helpful; but as time permits this weekend or on the flight I'll take what you've given me already and see what I can make of it!\r\n\r\nThanks a ton."
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/173481244",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/102#issuecomment-173481244",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/102",
    "id": 173481244,
    "user": {
     "login": "mzalewski",
     "id": 1389893,
     "avatar_url": "https://avatars.githubusercontent.com/u/1389893?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/mzalewski",
     "html_url": "https://github.com/mzalewski",
     "followers_url": "https://api.github.com/users/mzalewski/followers",
     "following_url": "https://api.github.com/users/mzalewski/following{/other_user}",
     "gists_url": "https://api.github.com/users/mzalewski/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/mzalewski/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/mzalewski/subscriptions",
     "organizations_url": "https://api.github.com/users/mzalewski/orgs",
     "repos_url": "https://api.github.com/users/mzalewski/repos",
     "events_url": "https://api.github.com/users/mzalewski/events{/privacy}",
     "received_events_url": "https://api.github.com/users/mzalewski/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "1/21/2016",
    "updated_at": "2016-01-21T07:16:51Z",
    "body": "Ok great - looks like it'll be a great event :) I'll definitely put some\ntime aside to go through it before then.\n\nOn Thu, Jan 21, 2016 at 4:51 PM, K.Adam White <notifications@github.com>\nwrote:\n\n> @mzalewski <https://github.com/mzalewski> no problem whatsoever, I\n> appreciate it. I'm going to have some concerted time to work on this in\n> conjunction with the WP-API team at the feelingrestful.com event next\n> week, so if you get a chance to go through it in more detail by Wednesday\n> or so that'd be very helpful; but as time permits this weekend or on the\n> flight I'll take what you've given me already and see what I can make of it!\n>\n> Thanks a ton.\n>\n> —\n> Reply to this email directly or view it on GitHub\n> <https://github.com/kadamwhite/wordpress-rest-api/issues/102#issuecomment-173476285>\n> .\n>\n"
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/175594132",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/102#issuecomment-175594132",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/102",
    "id": 175594132,
    "user": {
     "login": "mzalewski",
     "id": 1389893,
     "avatar_url": "https://avatars.githubusercontent.com/u/1389893?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/mzalewski",
     "html_url": "https://github.com/mzalewski",
     "followers_url": "https://api.github.com/users/mzalewski/followers",
     "following_url": "https://api.github.com/users/mzalewski/following{/other_user}",
     "gists_url": "https://api.github.com/users/mzalewski/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/mzalewski/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/mzalewski/subscriptions",
     "organizations_url": "https://api.github.com/users/mzalewski/orgs",
     "repos_url": "https://api.github.com/users/mzalewski/repos",
     "events_url": "https://api.github.com/users/mzalewski/events{/privacy}",
     "received_events_url": "https://api.github.com/users/mzalewski/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "1/27/2016",
    "updated_at": "2016-01-27T12:32:04Z",
    "body": "Sorry - hope I'm not too late.. Here is a basic overview of the process (found on another site).\r\n\r\nThe dashed lines represent server-to-server communication, and the solid lines are user/browser redirects.\r\n\r\nI'll go through the steps in the image and try to match it up with the code I added.\r\nStep A: This is the oauth1.getAuthorizeUrl call - it uses the client ID and secret to request a \"Request Token\". The second part of this function then generates a URL for the user to visit.  \r\n\r\nStep B: The user must navigate to the signed URL generated in Step A - either by redirect, or manual browser navigation. \r\n\r\nStep C: The server (WP) will verify the Request token and generate a verification Token\r\n\r\nStep D: Now we have a verification Token, it needs to be passed back to the Node App - either by redirect, or by asking the user to copy+paste it.\r\n\r\nStep E: oauth1.getAccessToken will use the verification token to ask the server for an Access Token. \r\n\r\nStep F+: Access Token is granted by the server and is used to sign all future requests.\r\n\r\n![Overview](http://blogs.wrox.com/sites/default/files/users/17/image/figures%20ch6/531327%20f0602.png)"
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/175599891",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/102#issuecomment-175599891",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/102",
    "id": 175599891,
    "user": {
     "login": "mzalewski",
     "id": 1389893,
     "avatar_url": "https://avatars.githubusercontent.com/u/1389893?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/mzalewski",
     "html_url": "https://github.com/mzalewski",
     "followers_url": "https://api.github.com/users/mzalewski/followers",
     "following_url": "https://api.github.com/users/mzalewski/following{/other_user}",
     "gists_url": "https://api.github.com/users/mzalewski/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/mzalewski/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/mzalewski/subscriptions",
     "organizations_url": "https://api.github.com/users/mzalewski/orgs",
     "repos_url": "https://api.github.com/users/mzalewski/repos",
     "events_url": "https://api.github.com/users/mzalewski/events{/privacy}",
     "received_events_url": "https://api.github.com/users/mzalewski/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "1/27/2016",
    "updated_at": "2016-01-27T12:42:32Z",
    "body": "I've also updated my repository with 2 examples (examples folder) - one is an express app which will redirect the user to WP to obtain authorization, the other asks the user to copy and paste URLs/tokens via the console"
   },
   {
    "url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/comments/176237126",
    "html_url": "https://github.com/kadamwhite/wordpress-rest-api/issues/102#issuecomment-176237126",
    "issue_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/102",
    "id": 176237126,
    "user": {
     "login": "justingreerbbi",
     "id": 4920929,
     "avatar_url": "https://avatars.githubusercontent.com/u/4920929?v=3",
     "gravatar_id": "",
     "url": "https://api.github.com/users/justingreerbbi",
     "html_url": "https://github.com/justingreerbbi",
     "followers_url": "https://api.github.com/users/justingreerbbi/followers",
     "following_url": "https://api.github.com/users/justingreerbbi/following{/other_user}",
     "gists_url": "https://api.github.com/users/justingreerbbi/gists{/gist_id}",
     "starred_url": "https://api.github.com/users/justingreerbbi/starred{/owner}{/repo}",
     "subscriptions_url": "https://api.github.com/users/justingreerbbi/subscriptions",
     "organizations_url": "https://api.github.com/users/justingreerbbi/orgs",
     "repos_url": "https://api.github.com/users/justingreerbbi/repos",
     "events_url": "https://api.github.com/users/justingreerbbi/events{/privacy}",
     "received_events_url": "https://api.github.com/users/justingreerbbi/received_events",
     "type": "User",
     "site_admin": false
    },
    "created_at": "1/28/2016",
    "updated_at": "2016-01-28T15:31:08Z",
    "body": "I wanted to stop by and put in 2 cents! I am going to be putting a full strip down native WP version of WP OAuth Server which will be a bare bones server with no license or paid version. DB Structure will be merged to handle consumers just as the OAuth1.0a plugin does.\r\n\r\nI am open for helping out where I can.\r\n\r\n"
   }
  ],
  "comments_url": "https://api.github.com/repos/kadamwhite/wordpress-rest-api/issues/102/comments",
  "milestone": null,
  "quicklink": "kadamwhite/wordpress-rest-api#102"
 }
]