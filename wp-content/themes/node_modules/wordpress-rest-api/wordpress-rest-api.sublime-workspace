{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Suc",
				"SUCCESS"
			],
			[
				"custom",
				"customendpoint"
			],
			[
				"apiR",
				"apiRootJSON"
			],
			[
				"routes",
				"routesByNamespace"
			],
			[
				"getAPIR",
				"getAPIRootFromURL"
			],
			[
				"apiT",
				"apiRootURL"
			],
			[
				"heR",
				"headerRel"
			],
			[
				"getEn",
				"getEndpointFromURL"
			],
			[
				"render",
				"_renderURI"
			],
			[
				"outpu",
				"outputPath"
			],
			[
				"out",
				"outputPath"
			],
			[
				"full",
				"fullPostsCollectionRouteDefinition"
			],
			[
				"sip",
				"simplifyObject"
			],
			[
				"slim",
				"slimCopyObject"
			],
			[
				"simpl",
				"simplifyObject"
			],
			[
				"simp",
				"simplifyObject"
			],
			[
				"filter",
				"filterMixins"
			],
			[
				"WPRe",
				"WPRequest"
			],
			[
				"groupP",
				"groupPattern"
			],
			[
				"groupPa",
				"groupPatternRE"
			],
			[
				"gropP",
				"groupPatternRE"
			],
			[
				"all",
				"allOptionsInvalid"
			],
			[
				"validatePa",
				"validatePathLevel"
			],
			[
				"methd",
				"methodName"
			],
			[
				"filt",
				"filterMixins"
			],
			[
				"endpp",
				"endpointResponse"
			],
			[
				"js",
				"jshint-stylish"
			],
			[
				"reduceR",
				"reduceRouteComponent"
			],
			[
				"creat",
				"createSetterFnForNode"
			],
			[
				"_re",
				"_renderQuery"
			],
			[
				"que",
				"getQueryStr"
			],
			[
				"authe",
				"authenticateUserWP"
			],
			[
				"setterFn",
				"setterFnName"
			],
			[
				"dyna",
				"dynamicChild"
			],
			[
				"namedG",
				"namedGroupRegexp"
			],
			[
				"_le",
				"_levels"
			],
			[
				"name",
				"namespace"
			],
			[
				"_lev",
				"_levelValidators"
			],
			[
				"handle",
				"endpointHandlers"
			],
			[
				"namedGr",
				"namedGroup"
			],
			[
				"named",
				"namedGroupRegexp"
			],
			[
				"route",
				"routesByNamespace"
			],
			[
				"coll",
				"collectionRequest"
			],
			[
				"alpha",
				"alphaNumericSort"
			],
			[
				"cat",
				"categories"
			],
			[
				"chilc",
				"childCat2"
			],
			[
				"chiC",
				"childCat1"
			],
			[
				"cate",
				"categories"
			],
			[
				"updated",
				"updatedPost"
			],
			[
				"upd",
				"updatedPost"
			],
			[
				"titles",
				"getTitles"
			],
			[
				"tot",
				"timeout	setTimeout function"
			],
			[
				"action",
				"actionId"
			],
			[
				"query",
				"queryString"
			],
			[
				"quer",
				"queryString"
			],
			[
				"strin",
				"stringify"
			],
			[
				"parsed",
				"parsedResult"
			],
			[
				"par",
				"parsedNext"
			],
			[
				"resp",
				"response"
			],
			[
				"sand",
				"SandboxedRequest"
			],
			[
				"exp",
				"expectedNextLink"
			],
			[
				"ex",
				"expectedPrevLink"
			],
			[
				"res",
				"resourceUrl"
			],
			[
				"req",
				"requestUrl"
			],
			[
				"pag",
				"paginatedResult"
			],
			[
				"tax",
				"taxonomyName"
			],
			[
				"use",
				"username"
			],
			[
				"WP",
				"WPRequest"
			],
			[
				"Co",
				"CollectionRequest"
			],
			[
				"requ",
				"requestMethod"
			],
			[
				"endpoi",
				"endpoint"
			],
			[
				"_p",
				"_options"
			],
			[
				"path",
				"pathRequest"
			],
			[
				"post",
				"posts"
			],
			[
				"prepa",
				"prepareParameters"
			],
			[
				"expec",
				"expectedURI"
			],
			[
				"current",
				"currentVal"
			],
			[
				"_ren",
				"_renderPath"
			],
			[
				"_path",
				"_pathStr"
			],
			[
				"inst",
				"instanceof"
			],
			[
				"get",
				"getNormalizedColor"
			],
			[
				"cent",
				"centerpointTimeout"
			],
			[
				"clear",
				"clearTimeout"
			],
			[
				"clea",
				"clearScreenTimeout"
			],
			[
				"r",
				"rgbToColorArray"
			],
			[
				"random",
				"randomRGBA"
			],
			[
				"rando",
				"randomColor"
			],
			[
				"dire",
				"directory"
			],
			[
				"direc",
				"directories"
			],
			[
				"get_taxon",
				"get_taxonomy_term"
			],
			[
				"taxon",
				"taxonomy_types"
			],
			[
				"obje",
				"object_type"
			],
			[
				"publc",
				"public_taxonomies"
			],
			[
				"public",
				"public_taxonomies"
			],
			[
				"assert",
				"assertEquals"
			],
			[
				"asser",
				"assertEquals"
			],
			[
				"json",
				"json_ensure_response"
			],
			[
				"trunc",
				"truncatedContent"
			],
			[
				"trun",
				"truncatedContent"
			],
			[
				"library-",
				"library-archive"
			],
			[
				"backgrou",
				"background-size"
			],
			[
				"wordpress",
				"wordpress-importer"
			],
			[
				"so",
				"societyofgrownups"
			],
			[
				"node",
				"node_modules"
			],
			[
				"conf",
				"conf"
			],
			[
				"respo",
				"respond-from"
			],
			[
				"unc",
				"uncategorizedTopic"
			],
			[
				"posts",
				"posts_per_archive_page"
			],
			[
				"article",
				"articleRoute"
			],
			[
				"http",
				"httpMock"
			],
			[
				"proto",
				"prototype"
			],
			[
				"default",
				"defaultQueryParams"
			],
			[
				"temp",
				"tempToClass"
			],
			[
				"late",
				"latestTweet"
			],
			[
				"latest",
				"latestPost"
			],
			[
				"lat",
				"latestTweet"
			],
			[
				"arti",
				"article-intro"
			],
			[
				"symb",
				"symbol-white"
			],
			[
				"proc",
				"processResponse"
			],
			[
				"jscs",
				"jscsPlugin"
			],
			[
				"p",
				"PluginError"
			],
			[
				"issue",
				"issuesByFile"
			],
			[
				"isu",
				"issueFilePattern"
			],
			[
				"jshi",
				"jshintrcPath"
			],
			[
				"jsh",
				"jshint-stylish"
			],
			[
				"bu",
				"buildTarget"
			],
			[
				"swa",
				"swapBasePath"
			],
			[
				"confi",
				"configuration"
			]
		]
	},
	"buffers":
	[
		{
			"file": "wp.js",
			"settings":
			{
				"buffer_size": 10477,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/constructors/wp-request.js",
			"settings":
			{
				"buffer_size": 25487,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "'use strict';\nvar chai = require( 'chai' );\n// Variable to use as our \"success token\" in promise assertions\nvar SUCCESS = 'success';\n// Chai-as-promised and the `expect( prom ).to.eventually.equal( SUCCESS ) is\n// used to ensure that the assertions running within the promise chains are\n// actually run.\nchai.use( require( 'chai-as-promised' ) );\nchai.use( require( 'sinon-chai' ) );\nvar expect = chai.expect;\nvar sinon = require( 'sinon' );\n\n/*jshint -W079 */// Suppress warning about redefiniton of `Promise`\nvar Promise = require( 'bluebird' );\n\nvar WP = require( '../../' );\nvar WPRequest = require( '../../lib/constructors/wp-request.js' );\nvar autodiscovery = require( '../../lib/autodiscovery' );\n\n// Define some arrays to use ensuring the returned data is what we expect\n// it to be (e.g. an array of the titles from posts on the first page)\nvar expectedResults = {\n	firstPostTitle: 'Markup: HTML Tags and Formatting'\n};\n\n// Inspecting the titles of the returned posts arrays is an easy way to\n// validate that the right page of results was returned\nfunction getTitles( posts ) {\n	return posts.map(function( post ) {\n		return post.title.rendered;\n	});\n}\n\ndescribe( 'integration: discover()', function() {\n	var apiPromise;\n	var sinonSandbox;\n\n	beforeEach(function() {\n		apiPromise = WP.discover( 'http://wpapi.loc' );\n		// Stub warn and error\n		sinonSandbox = sinon.sandbox.create();\n		sinonSandbox.stub( global.console, 'warn' );\n		sinonSandbox.stub( global.console, 'error' );\n	});\n\n	afterEach(function() {\n		// Restore sandbox\n		sinonSandbox.restore();\n	});\n\n	it( 'returns a promise', function() {\n		expect( apiPromise ).to.be.an.instanceOf( Promise );\n	});\n\n	it( 'eventually returns a configured WP instance', function() {\n		var prom = apiPromise.then(function( result ) {\n			expect( result ).to.be.an.instanceOf( WP );\n			expect( result.namespace( 'wp/v2' ) ).to.be.an( 'object' );\n			expect( result.posts ).to.be.a( 'function' );\n			expect( result.posts() ).to.be.an.instanceOf( WPRequest );\n			return SUCCESS;\n		});\n		return expect( prom ).to.eventually.equal( SUCCESS );\n	});\n\n	it( 'auto-binds to the detected endpoint on the provided site', function() {\n		var prom = apiPromise.then(function( site ) {\n			expect( site.posts()._renderURI() ).to.equal( 'http://wpapi.loc/wp-json/wp/v2/posts' );\n			return SUCCESS;\n		});\n		return expect( prom ).to.eventually.equal( SUCCESS );\n	});\n\n	it( 'can correctly instantiate requests against the detected and bound site', function() {\n		var prom = apiPromise.then(function( site ) {\n			return site.posts();\n		}).then(function( posts ) {\n			expect( getTitles( posts )[ 0 ] ).to.equal( expectedResults.firstPostTitle );\n			return SUCCESS;\n		});\n		return expect( prom ).to.eventually.equal( SUCCESS );\n	});\n\n	describe( 'rejection states', function() {\n\n		beforeEach(function() {\n			sinon.stub( autodiscovery, 'getAPIRootFromURL' );\n			sinon.stub( autodiscovery, 'locateAPIRootHeader' );\n			sinon.stub( autodiscovery, 'getRootResponseJSON' );\n		});\n\n		afterEach(function() {\n			autodiscovery.getAPIRootFromURL.restore();\n			autodiscovery.locateAPIRootHeader.restore();\n			autodiscovery.getRootResponseJSON.restore();\n		});\n\n		it( 'resolves even if no endpoint is found', function() {\n			autodiscovery.getAPIRootFromURL.returns( Promise.reject() );\n			var prom = WP.discover( 'http://we.made.it/to/mozarts/house' );\n			return expect( prom ).to.eventually.be.fulfilled;\n		});\n\n		it( 'resolves to null if no endpoint is found', function() {\n			autodiscovery.getAPIRootFromURL.returns( Promise.resolve() );\n			var prom = WP.discover( 'http://we.made.it/to/mozarts/house' )\n				.then(function( result ) {\n					expect( result ).to.equal( null );\n					return SUCCESS;\n				});\n			return expect( prom ).to.eventually.equal( SUCCESS );\n		});\n\n		it( 'logs a console error if no endpoint is found', function() {\n			autodiscovery.getAPIRootFromURL.returns( Promise.reject() );\n			var prom = WP.discover( 'http://we.made.it/to/mozarts/house' )\n				.then(function() {\n					expect( console.error ).to.have.been.calledWith( 'Autodiscovery failed' );\n					return SUCCESS;\n				});\n			return expect( prom ).to.eventually.equal( SUCCESS );\n		});\n\n		it( 'does not display any warnings if no endpoint is found', function() {\n			autodiscovery.getAPIRootFromURL.returns( Promise.reject() );\n			var prom = WP.discover( 'http://we.made.it/to/mozarts/house' )\n				.then(function() {\n					expect( console.warn ).not.to.have.been.called;\n					return SUCCESS;\n				});\n			return expect( prom ).to.eventually.equal( SUCCESS );\n		});\n\n		it( 'resolves to a WP instance if an endpoint is found but route autodiscovery fails', function() {\n			autodiscovery.getAPIRootFromURL.returns( Promise.resolve() );\n			autodiscovery.locateAPIRootHeader.returns( 'http://we.made.it/to/mozarts/house' );\n			autodiscovery.getRootResponseJSON.throws();\n			var prom = WP.discover()\n				.then(function( result ) {\n					expect( result ).to.be.an.instanceOf( WP );\n					return SUCCESS;\n				});\n			return expect( prom ).to.eventually.equal( SUCCESS );\n		});\n\n		it( 'binds returned instance to the provided endpoint even if route autodiscovery fails', function() {\n			autodiscovery.getAPIRootFromURL.returns( Promise.resolve() );\n			autodiscovery.locateAPIRootHeader.returns( 'http://we.made.it/to/mozarts/house' );\n			autodiscovery.getRootResponseJSON.throws();\n			var prom = WP.discover()\n				.then(function( result ) {\n					expect( result.root( '' )._renderURI() ).to.equal( 'http://we.made.it/to/mozarts/house/' );\n					return SUCCESS;\n				});\n			return expect( prom ).to.eventually.equal( SUCCESS );\n		});\n\n		it( 'logs a console error if an endpoint is found but route autodiscovery fails', function() {\n			autodiscovery.getAPIRootFromURL.returns( Promise.resolve() );\n			autodiscovery.locateAPIRootHeader.returns( 'http://we.made.it/to/mozarts/house' );\n			autodiscovery.getRootResponseJSON.throws();\n			var prom = WP.discover()\n				.then(function() {\n					expect( console.error ).to.have.been.calledWith( 'Autodiscovery failed' );\n					return SUCCESS;\n				});\n			return expect( prom ).to.eventually.equal( SUCCESS );\n		});\n\n		it( 'displays a warning if an endpoint is detected but route autodiscovery fails', function() {\n			autodiscovery.getAPIRootFromURL.returns( Promise.resolve() );\n			autodiscovery.locateAPIRootHeader.returns( 'http://we.made.it/to/mozarts/house' );\n			autodiscovery.getRootResponseJSON.throws();\n			var prom = WP.discover()\n				.then(function() {\n					expect( console.warn ).to.have.been.calledWith( 'Endpoint detected, proceeding despite error...' );\n					expect( console.warn ).to.have.been.calledWith( 'Binding to http://we.made.it/to/mozarts/house and assuming default routes' );\n					return SUCCESS;\n				});\n			return expect( prom ).to.eventually.equal( SUCCESS );\n		});\n\n	});\n\n});\n",
			"file": "tests/integration/autodiscovery.js",
			"file_size": 6809,
			"file_write_time": 131112774790000000,
			"settings":
			{
				"buffer_size": 6809,
				"line_ending": "Unix"
			}
		},
		{
			"file": "tests/integration/taxonomies.js",
			"settings":
			{
				"buffer_size": 2027,
				"line_ending": "Unix"
			}
		},
		{
			"file": "tests/unit/wp.js",
			"settings":
			{
				"buffer_size": 12755,
				"line_ending": "Unix"
			}
		},
		{
			"file": "package.json",
			"settings":
			{
				"buffer_size": 2263,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/mixins/parameters.js",
			"settings":
			{
				"buffer_size": 4993,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/JSHint/JSHint.sublime-build",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 375.0,
		"last_filter": "js",
		"selected_items":
		[
			[
				"js",
				"Set Syntax: JavaScript"
			],
			[
				"form",
				"Format: Javascript"
			],
			[
				"json",
				"Set Syntax: JSON"
			],
			[
				"blame",
				"Git: Blame"
			],
			[
				"previ",
				"Markdown Preview: Preview in Browser"
			],
			[
				"prev",
				"Markdown Preview: Preview in Browser"
			],
			[
				"pre",
				"Markdown Preview: Preview in Browser"
			],
			[
				"markd",
				"Set Syntax: Markdown"
			],
			[
				"sort",
				"Sort Lines"
			],
			[
				"format",
				"Format: Javascript"
			],
			[
				"uniqu",
				"Permute Lines: Unique"
			],
			[
				"forma",
				"Format: Javascript"
			],
			[
				"wrap",
				"Word Wrap: Toggle"
			],
			[
				"babel",
				"Set Syntax: JavaScript (Babel)"
			],
			[
				"preview",
				"Markdown Preview: Preview in Browser"
			],
			[
				"mardk",
				"Set Syntax: Markdown"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"disabl",
				"Package Control: Disable Package"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"low",
				"Convert Case: Lower Case"
			],
			[
				"mark",
				"Set Syntax: Markdown"
			],
			[
				"previe",
				"Markdown Preview: Preview in Browser"
			],
			[
				"ind",
				"Indent JSON"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"lower",
				"Convert Case: Lower Case"
			],
			[
				"upp",
				"Convert Case: Upper Case"
			],
			[
				"package",
				"Package Control: Enable Package"
			],
			[
				"bash",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"shell",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"ssh",
				"Set Syntax: HTML"
			],
			[
				"php",
				"Set Syntax: PHP"
			],
			[
				"github",
				"Markdown Preview: Github Flavored Markdown: Preview in Browser"
			],
			[
				"sh",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"lowe",
				"Convert Case: Lower Case"
			],
			[
				"java",
				"Set Syntax: JavaScript"
			],
			[
				"oreview",
				"Markdown Preview: Github Flavored Markdown: Preview in Browser"
			],
			[
				"markdow",
				"Set Syntax: Markdown"
			],
			[
				"html",
				"Set Syntax: HTML"
			],
			[
				"styl",
				"Set Syntax: Stylus"
			],
			[
				"color",
				"Color picker"
			],
			[
				"packali",
				"Package Control: List Packages"
			],
			[
				"gist",
				"Gist: Open Gist"
			],
			[
				"handle",
				"Set Syntax: Handlebars"
			],
			[
				"upper",
				"Convert Case: Upper Case"
			],
			[
				"gith",
				"Markdown Preview: Github Flavored Markdown: Preview in Browser"
			],
			[
				"bla",
				"Git: Blame"
			],
			[
				"markdown",
				"Set Syntax: Markdown"
			],
			[
				"blamer",
				"Markdown Preview: Github Flavored Markdown: Export HTML in Sublime Text"
			],
			[
				"packlis",
				"Package Control: List Packages"
			],
			[
				"markdo",
				"Set Syntax: Markdown"
			],
			[
				"fo",
				"Format: Javascript"
			],
			[
				"text",
				"Set Syntax: Plain Text"
			],
			[
				"txt",
				"Set Syntax: TeX Math"
			],
			[
				"javas",
				"Set Syntax: JavaScript"
			],
			[
				"blae",
				"Git: Blame"
			],
			[
				"ena",
				"Package Control: Enable Package"
			],
			[
				"disab",
				"Package Control: Disable Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"sor",
				"Sort Lines"
			],
			[
				"packare",
				"Package Control: Remove Package"
			],
			[
				"mar",
				"Set Syntax: Markdown Extended"
			],
			[
				"prevprev",
				"Markdown Preview: Python Markdown: Preview in Browser"
			],
			[
				"prevpre",
				"Markdown Preview: Python Markdown: Preview in Browser"
			],
			[
				"uper",
				"Convert Case: Upper Case"
			],
			[
				"packains",
				"Package Control: Install Package"
			],
			[
				"packag",
				"Package Control: Remove Package"
			],
			[
				"a",
				"AngularJS: Rebuild Search Index"
			],
			[
				"enable",
				"Package Control: Enable Package"
			],
			[
				"packaena",
				"Package Control: Enable Package"
			],
			[
				"packalis",
				"Package Control: List Packages"
			],
			[
				"lorem",
				"Snippet: Lorem ipsum"
			],
			[
				"toggle tra",
				"Trailing Spaces: Toggle Trailing Spaces Highlighting"
			],
			[
				"traili",
				"Trailing Spaces: Toggle Trailing Spaces Highlighting"
			],
			[
				"jaa",
				"Set Syntax: JavaScript"
			],
			[
				"prett",
				"HTMLPrettify"
			],
			[
				"pretti",
				"HTMLPrettify"
			],
			[
				"tidy",
				"TidyHTML"
			],
			[
				"t",
				"TidyHTML"
			],
			[
				"trail",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"htm",
				"Set Syntax: HTML"
			],
			[
				"blam",
				"Git: Blame"
			],
			[
				"subli",
				"SublimeLinter: Show Error List"
			],
			[
				"error",
				"SublimeLinter: Show Error List"
			],
			[
				"strips",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"s",
				"Sort Lines"
			],
			[
				"SORT",
				"Sort Lines"
			],
			[
				"packdis",
				"Package Control: Disable Package"
			],
			[
				"wra",
				"Word Wrap: Toggle"
			],
			[
				"packen",
				"Package Control: Enable Package"
			],
			[
				"packaen",
				"Package Control: Enable Package"
			],
			[
				"packa",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"pacli",
				"Package Control: List Packages"
			],
			[
				"packdi",
				"Package Control: Disable Package"
			],
			[
				"paremo",
				"Package Control: Remove Package"
			],
			[
				"sublime",
				"Preferences: SublimeLinter Settings – User"
			],
			[
				"reveal",
				"File: Reveal"
			],
			[
				"project",
				"Project: Edit"
			],
			[
				"pac",
				"Package Control: List Packages"
			],
			[
				"settings",
				"Preferences: Settings - Default"
			],
			[
				"proje",
				"Project: Save As"
			],
			[
				"projec",
				"Project: Save As"
			],
			[
				"delete",
				"Markdown Preview: export HTML in Sublime Text"
			],
			[
				"jshin",
				"JSHint"
			],
			[
				"jshi",
				"JSHint"
			],
			[
				"jshint",
				"JSHint"
			],
			[
				"hint",
				"JSHint"
			],
			[
				"setti",
				"Preferences: Settings - User"
			]
		],
		"width": 441.0
	},
	"console":
	{
		"height": 125.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/integration",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/lib",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/mocks"
	],
	"file_history":
	[
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/.git/COMMIT_EDITMSG",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/.git/rebase-merge/git-rebase-todo",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/wp.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/integration/autodiscovery.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/autodiscovery.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/wp-register-route.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/lib/wp-register-route.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/endpoint-factories.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/lib/constructors/wp-request.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/lib/autodiscovery.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/constructors/wp-request.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/data/generate-endpoint-response-json.js",
		"/Users/kadam/gh/kadamwhite/wpapi-vagrant-varietal/Vagrantfile",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/lib/route-tree.js",
		"/Users/kadam/Downloads/Chat with K Adam White.ichat",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/route-handlers/taxonomies.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/README.md",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/resource-handler-spec.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/wp.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/.jshintrc",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/integration/posts.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/lib/util/named-group-regexp.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/endpoint-request.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/path-part-setter.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/route-tree.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/integration/comments.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/util/named-group-regexp.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/package.json",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/data/endpoint-response.json",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/.jshintignore",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/data/.jshintignore",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/.gitattributes",
		"/Users/kadam/dev/projects/temp.txt",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/route-handlers/pages.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/lib/data/posts-collection-route-definition.json",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/data/simplify-object.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/lib/data/simplify-object.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/route-handlers/users.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/route-handlers/media.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/route-handlers/posts.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/route-handlers/types.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/lib/comments.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/lib/mixins/parameters.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/lib/mixins/filters.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/integration/categories.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/integration/pages.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/integration/tags.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/lib/media.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/lib/pages.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/lib/posts.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/lib/taxonomies.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/lib/types.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/lib/users.js",
		"/Users/kadam/Desktop/Vidyo/people to meet with.txt",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/shared/wp-request.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/util/make-endpoint-request.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/shared/collection-request.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/integration/taxonomies.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/lib/shared/wp-request.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/lib/shared/collection-request.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/lib/util/route-tree.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/media.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/util/resource-handler-spec.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/util/route-tree.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/util/generate-path-part-setter.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/mixins/index.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/util/parse-route-string.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/data/make-routes-json.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/.jshintrc",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/Gruntfile.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/.jscsrc",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/types.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/.jscsrc",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/util/ensure.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/lib/util/ensure.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/.eslintrc.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/.eslintrc.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/unit/mocks/mock-superagent.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/mixins/filters.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/util/log-obj.js",
		"/Users/kadam/.bash_profile",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/util/build-route-tree.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/wordpress-rest-api.sublime-project",
		"/Users/kadam/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/taxonomies.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/mixins/parameters.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/pages.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/comments.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/posts.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/users.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/generate-path-part-setter.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/parse-route-string.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/perf.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/test.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/CONTRIBUTING.md",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/lib/alphanumeric-sort.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/build-route-tree.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/named-group-regexp.js",
		"/Users/kadam/Desktop/2016.02.11 - Siobhan Day of REST convo.md",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/endpoint-response.json",
		"/Users/kadam/Desktop/2016.02.09 - notes from james on angular class.md",
		"/Users/kadam/Desktop/2016.01.05-matt-chat-about-api.txt",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/path/numeric-id.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/.git/info/exclude",
		"/Users/kadam/gh/kadamwhite/ghostpress/README.md",
		"/Users/kadam/gh/kadamwhite/ghostpress/config.yml",
		"/Users/kadam/gh/kadamwhite/ghostpress/themes/README.md",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/node_modules/superagent/lib/node/index.js",
		"/Users/kadam/Music/Dance/README.md",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/shared/alphanumeric-sort.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/node_modules/lodash/dist/lodash.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/.travis.yml",
		"/Users/kadam/gh/kadamwhite/mbtapi/package.json",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/coverage/lcov-report/lib/shared/collection-request.js.html",
		"/Users/kadam/Desktop/people.csv",
		"/Users/kadam/Desktop/wp api talk outline.md",
		"/Users/kadam/Desktop/wp-api bugs and potential bugs.md",
		"/Users/kadam/Desktop/browser links while working on wp-api talk.md",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/untitled.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/lib/shared/collection-request.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/lib/shared/wp-request.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests/lib/posts.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/coverage/coverage.json",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/.gitignore",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/var/public-query-vars.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/var/private-query-vars.js",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/lib/var/README.md",
		"/Users/kadam/gh/kadamwhite/wordpress-rest-api/.editorconfig"
	],
	"find":
	{
		"height": 37.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"",
			"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests",
			"",
			"/Users/kadam/gh/kadamwhite/wordpress-rest-api/tests",
			"",
			"*.js",
			"",
			"*.styl",
			"*.hbs",
			"*.styl",
			"*.js",
			"",
			"*.styl",
			"",
			"*.js",
			"",
			"*.styl",
			"*.hbs",
			"*.styl",
			"*.hbs",
			"",
			"*.styl",
			"",
			"*.styl",
			"",
			"*.js",
			"",
			"*.js",
			"",
			"*.hbs",
			"",
			"*.styl",
			"*.hbs",
			"*.js",
			"",
			"*.styl",
			"*.hbs",
			"*.styl",
			"",
			"/Users/kadam/bocoup/mm/repo/client/src, *.styl",
			"/Users/kadam/bocoup/mm/repo/client/src",
			"/Users/kadam/bocoup/mm/repo/client/src/style",
			"/Users/kadam/bocoup/mm/repo/client, -gumby.js, -mailchimp.js, -din_next_medium_condensed/*",
			"/Users/kadam/bocoup/mm/repo/client, -gumby.js, -mailchimp.js, -din_next_medium_condensed",
			"/Users/kadam/bocoup/mm/repo/client, -gumby.js, -mailchimp.js",
			"/Users/kadam/bocoup/mm/repo/client/src, -gumby.js, -mailchimp.js",
			"/Users/kadam/bocoup/mm/repo/client/src, -gumby.js",
			"/Users/kadam/bocoup/mm/repo/client/src",
			"/Users/kadam/bocoup/mm/repo/client/src/style",
			"",
			"/Users/kadam/bocoup/projects/ruelala/rue_buildout/src/rue-storemanager/rue/tests/unit",
			"/Users/kadam/bocoup/projects/ruelala/rue_buildout/src/rue-storemanager/rue/",
			"/Users/kadam/bocoup/projects/ruelala/rue_buildout/src/rue-storemanager/rue/static/app",
			"",
			"*spec.js",
			"",
			"*.html",
			"*.js",
			"*.py",
			"*.js",
			"",
			"/Users/kadam/bocoup/projects/ruelala/rue_buildout/src/rue-storemanager/rue/static/app/products",
			"/Users/kadam/bocoup/projects/ruelala/rue_buildout/src/rue-storemanager/rue/static/app",
			"",
			"*.html",
			"",
			"*Spec*",
			"",
			"*Spec*",
			"",
			"*Spec*.js",
			"*Spec.js",
			"",
			"*slick*.js",
			"",
			"*slick*js",
			"",
			"*Spec*.js",
			"",
			"<open files>",
			"",
			"<open files>",
			"",
			"<open files>",
			"",
			"<open files>",
			"",
			"<open files>",
			"",
			"<open files>",
			"",
			"<open files>",
			"",
			"/Users/kadam/bocoup/projects/rue_buildout/src/rue-storemanager, -/Users/kadam/bocoup/projects/rue_buildout/src/rue-storemanager/rue/site_media/*",
			"/Users/kadam/bocoup/projects/rue_buildout/src/rue-storemanager",
			"/Users/kadam/bocoup/projects/rue_buildout/src/rue-storemanager/rue/static/",
			"/Users/kadam/bocoup/projects/rue_buildout/src/rue-storemanager/rue/static/css",
			"/Users/kadam/bocoup/projects/rue_buildout/src/rue-storemanager/rue/static/less",
			"/Users/kadam/bocoup/projects/rue_buildout/src/rue-storemanager/rue/static/app",
			"/Users/kadam/bocoup/projects/rue_buildout/src/rue-storemanager/rue/static",
			"/Users/kadam/bocoup/projects/rue_buildout/src/rue-storemanager/rue/static/less",
			"/Users/kadam/bocoup/projects/rue_buildout/src/rue-storemanager/rue/less",
			"/Users/kadam/bocoup/projects/rue_buildout/src/rue-storemanager/rue/static",
			"/Users/kadam/bocoup/projects/rue_buildout/src/rue-storemanager/rue/static/app",
			"/Users/kadam/bocoup/projects/rue_buildout/src/rue-storemanager/rue/static/",
			"/Users/kadam/bocoup/projects/rue_buildout/src/rue-storemanager/rue/static/less",
			"/Users/kadam/bocoup/projects/rue_buildout/src/rue-storemanager/rue/static",
			"",
			"/Users/kadam/bocoup/projects/rue_buildout/src/rue-storemanager/rue/static/",
			"/Users/kadam/bocoup/projects/rue_buildout/src/rue-storemanager/rue/static/app",
			"",
			"*.less",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"write",
			"mkdir",
			"parse-link-header",
			"namespace",
			"head",
			"foo",
			"NaN",
			"identity",
			"transform",
			"apiRootJSON",
			"'https://my.endpoint/wp-json/'",
			"sinonSandbox",
			"sinon-chai",
			"sandbox",
			"apiPromise",
			"wpV2",
			"posts",
			"wpV2Namespace",
			"namespace",
			"namse",
			"authorsHandler",
			"wp",
			"WP",
			"page",
			"required",
			"site",
			"result",
			"sinon",
			"\\.only",
			"site",
			"user",
			"not",
			"getAPIRoot",
			"routeDe",
			"routesJSON",
			"apiRootJSON",
			"wp",
			"\\.bootstrap",
			"site",
			"routes",
			"defaultEndpointFactories",
			"nsObject",
			"namespace",
			"_namespaces",
			"apiDefaultNamespace",
			"defaultAPIVersion",
			"wpInstance",
			"console.error",
			"myplugin",
			"defaultEndpointFactories",
			"apiRootJson",
			"getRootResponseJSON",
			"wp",
			"endpointFactories",
			"routesByNamespace",
			"object",
			"property",
			"string",
			"request",
			"auth",
			"auth =",
			"auth",
			"autho",
			"getRootResponseJSON",
			"().",
			"getAPIRootFromURL",
			"useHeadRequest",
			"head",
			"foundAPIRoot",
			"getAPIRootFromURL",
			"agent",
			"linkUrl",
			"foundLink",
			"getJSON",
			"cbFn",
			"reject",
			"'application/json'",
			"getAPIRootFromURL",
			"headerRel",
			"https://api.w.org/",
			"resolve, reject",
			"wp",
			"getAPI",
			"getEndpoint",
			"headers",
			"getEndpointFromURL",
			"bluebird",
			"var Promise",
			"types",
			"- ",
			"types",
			"categories",
			"catId",
			"taxonomy_name",
			"taxonomy",
			"taxonomies",
			"pages\\(\\)",
			"error",
			"support for",
			"header",
			"sandbox",
			"console",
			"console.log",
			"\\.only",
			"sinon",
			"createEndpointRequest",
			"setterFn",
			"createPathPartSetter",
			"setter",
			"bluebird",
			"delete",
			"snake_cased_path_element",
			"_renderURI",
			"\\.only",
			"console",
			"throw",
			"\\.only",
			"only",
			"head",
			"supportedMethods",
			"suppotedMethods",
			"head",
			"log",
			"two",
			"})\n",
			"two",
			"expect",
			"createPathPartSetter"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"'",
			"\\1\\2:",
			"'",
			"constructors/wp",
			"head|patch|post|put",
			"",
			"'\\1'",
			"util/alphanumeric",
			"'",
			"expectedResults.postsAndAuthors",
			"'",
			"wp.comments",
			"'",
			",\\n\\t\\t",
			"  '\\1': {",
			"  \\1: {",
			"'",
			"",
			"this.namespace( 'wp/v2' );",
			"  ",
			"({})",
			"tags",
			"expectedResults.names",
			"",
			",",
			"]",
			"[",
			";console.log( prom._renderURI() );prom = prom.get()",
			" ",
			"require( '../\\1",
			"require( '\\1lib",
			"\\n<",
			"~/",
			"site",
			"ollection-request",
			"to.deep.equal( {} )",
			"collection-request",
			"/shared/wp-request",
			"CollectionMethods",
			"\\n",
			"%5D",
			"%5B",
			"_path",
			"_template",
			"_pathValidators",
			"types",
			"var ",
			"\\n",
			"_renderQuery",
			"_renderQueryString",
			"_renderPath",
			"_renderURI",
			"_getURI",
			"} )",
			"if (",
			"});",
			"\"",
			"'",
			"&#60;",
			"&#62;",
			"'",
			"< ",
			" >",
			"&lt;",
			"",
			": \\1",
			" ",
			"\\n",
			"{{{",
			"name=\"\\1\"></state>",
			"', ",
			"'",
			"require('",
			"\\n\\1",
			"\\n\\n\\1 \\2\\t\\t",
			"\\n\\n\\1 \\2",
			"\\n\\n\\1 \\2\\n",
			"* ",
			"",
			"&amp; ",
			"    ",
			"  ",
			"----",
			"    ",
			"  ",
			"----",
			"  ",
			"'",
			"",
			"  ",
			"client/",
			"/client/",
			",\n",
			"buildTarget",
			"  ",
			"buildTarget",
			"\"beginner mode\"",
			"'",
			"z",
			"Z",
			"    ",
			"?w=\\1\" width=\"90\"",
			"?w=150\" width=\"150\"",
			"    ",
			">(mm)<",
			"</em>",
			"<em>",
			"",
			"    ",
			"\\2 - \\1",
			"\\2\\t\\t\\t\\1",
			"\\1\\t\\t\\t\\2",
			"\\1\\t\\t\\2",
			" ",
			"h4>",
			"</p>\\n</li>",
			"\\n<p>",
			"”**",
			"” ",
			" “",
			"    ",
			"\\n",
			",\\n",
			"'",
			"<%-",
			"MockProductService",
			"\\n",
			"indexed 0\\1 "
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "wp.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10477,
						"regions":
						{
						},
						"selection":
						[
							[
								3415,
								3415
							]
						],
						"settings":
						{
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"history_list_is_closing": true,
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false,
							"trim_trailing_white_space_on_save": true
						},
						"translation.x": 0.0,
						"translation.y": 1405.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "lib/constructors/wp-request.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25487,
						"regions":
						{
						},
						"selection":
						[
							[
								18072,
								18072
							]
						],
						"settings":
						{
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"history_list_is_closing": true,
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false,
							"trim_trailing_white_space_on_save": true
						},
						"translation.x": 0.0,
						"translation.y": 9235.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "tests/integration/autodiscovery.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6809,
						"regions":
						{
						},
						"selection":
						[
							[
								1232,
								1232
							]
						],
						"settings":
						{
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"history_list_is_closing": true,
							"open_with_edit": true,
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false,
							"trim_trailing_white_space_on_save": true
						},
						"translation.x": 0.0,
						"translation.y": 59.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "tests/integration/taxonomies.js",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 2027,
						"regions":
						{
						},
						"selection":
						[
							[
								558,
								558
							]
						],
						"settings":
						{
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false,
							"trim_trailing_white_space_on_save": true
						},
						"translation.x": 0.0,
						"translation.y": 668.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "tests/unit/wp.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12755,
						"regions":
						{
						},
						"selection":
						[
							[
								3721,
								3721
							]
						],
						"settings":
						{
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false,
							"trim_trailing_white_space_on_save": true
						},
						"translation.x": 0.0,
						"translation.y": 1406.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "package.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2263,
						"regions":
						{
						},
						"selection":
						[
							[
								2127,
								2127
							]
						],
						"settings":
						{
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"syntax": "Packages/Theme - SoDaReloaded/settings/langs/npm JSON.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 426.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "lib/mixins/parameters.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4993,
						"regions":
						{
						},
						"selection":
						[
							[
								1875,
								1875
							]
						],
						"settings":
						{
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false,
							"trim_trailing_white_space_on_save": true
						},
						"translation.x": 0.0,
						"translation.y": 773.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 112.0
	},
	"output.find_results":
	{
		"height": 100.0
	},
	"pinned_build_system": "",
	"project": "wordpress-rest-api.sublime-project",
	"replace":
	{
		"height": 66.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"pack",
				"package.json"
			],
			[
				"wp",
				"tests/unit/wp.js"
			],
			[
				"intaut",
				"tests/integration/autodiscovery.js"
			],
			[
				"tewp",
				"tests/unit/wp.js"
			],
			[
				"wpre",
				"lib/constructors/wp-request.js"
			],
			[
				"testwp",
				"tests/unit/wp.js"
			],
			[
				"mixin",
				"lib/mixins/parameters.js"
			],
			[
				"wpr",
				"lib/constructors/wp-request.js"
			],
			[
				"wp.js",
				"tests/unit/wp.js"
			],
			[
				"regrout",
				"lib/wp-register-route.js"
			],
			[
				"wprerou",
				"tests/unit/lib/wp-register-route.js"
			],
			[
				"endpf",
				"lib/endpoint-factories.js"
			],
			[
				"end",
				"lib/endpoint-factories.js"
			],
			[
				"routet",
				"tests/unit/lib/route-tree.js"
			],
			[
				"tewpre",
				"tests/unit/lib/constructors/wp-request.js"
			],
			[
				"testhandtax",
				"tests/unit/route-handlers/taxonomies.js"
			],
			[
				"rea",
				"README.md"
			],
			[
				"testcomm",
				"tests/integration/comments.js"
			],
			[
				"namegroup",
				"lib/util/named-group-regexp.js"
			],
			[
				"pathpa",
				"lib/path-part-setter.js"
			],
			[
				"testwp.j",
				"tests/unit/wp.js"
			],
			[
				"routt",
				"lib/route-tree.js"
			],
			[
				"pap",
				"lib/path-part-setter.js"
			],
			[
				"endfa",
				"lib/endpoint-factories.js"
			],
			[
				"rout",
				"lib/route-tree.js"
			],
			[
				"pa",
				"package.json"
			],
			[
				"tree",
				"lib/route-tree.js"
			],
			[
				"libuser",
				"tests/unit/lib/users.js"
			],
			[
				"endp",
				"lib/endpoint-factories.js"
			],
			[
				"colre",
				"lib/shared/collection-request.js"
			],
			[
				"tesfilt",
				"tests/unit/lib/mixins/filters.js"
			],
			[
				"tesmixi",
				"tests/unit/lib/mixins/parameters.js"
			],
			[
				"types",
				"tests/unit/lib/types.js"
			],
			[
				"colr",
				"lib/shared/collection-request.js"
			],
			[
				"testuni",
				"tests/unit/wp.js"
			],
			[
				"teswp",
				"tests/unit/lib/shared/wp-request.js"
			],
			[
				"test/wp",
				"tests/unit/wp.js"
			],
			[
				"testw",
				"tests/unit/lib/shared/wp-request.js"
			],
			[
				"testou",
				"tests/unit/lib/util/route-tree.js"
			],
			[
				"collre",
				"lib/shared/collection-request.js"
			],
			[
				"unitpos",
				"tests/unit/lib/posts.js"
			],
			[
				"testunpag",
				"tests/unit/lib/pages.js"
			],
			[
				"commentjs",
				"tests/unit/lib/comments.js"
			],
			[
				"tesunitpo",
				"tests/unit/lib/posts.js"
			],
			[
				"post",
				"tests/unit/lib/posts.js"
			],
			[
				"media",
				"tests/unit/lib/media.js"
			],
			[
				"intecomm",
				"tests/integration/comments.js"
			],
			[
				"rehan",
				"lib/util/resource-handler-spec.js"
			],
			[
				"testlibco",
				"tests/unit/lib/comments.js"
			],
			[
				"routetr",
				"lib/util/route-tree.js"
			],
			[
				"jshint",
				".jshintrc"
			],
			[
				"jscs",
				".jscsrc"
			],
			[
				"grunt",
				"Gruntfile.js"
			],
			[
				"route",
				"lib/util/route-tree.js"
			],
			[
				"ensu",
				"lib/util/ensure.js"
			],
			[
				"buil",
				"tests/unit/lib/util/build-route-tree.js"
			],
			[
				"testutil",
				"tests/unit/lib/util/build-route-tree.js"
			],
			[
				"gru",
				"Gruntfile.js"
			],
			[
				"libmixfi",
				"lib/mixins/filters.js"
			],
			[
				"teunmifi",
				"tests/unit/lib/mixins/filters.js"
			],
			[
				"testintcom",
				"tests/integration/comments.js"
			],
			[
				"tecolr",
				"tests/unit/lib/shared/collection-request.js"
			],
			[
				"mock",
				"tests/unit/mocks/mock-superagent.js"
			],
			[
				"tesunitwp",
				"tests/unit/wp.js"
			],
			[
				"tesunlita",
				"tests/unit/lib/taxonomies.js"
			],
			[
				"teunshawp",
				"tests/unit/lib/shared/wp-request.js"
			],
			[
				"tesunwp",
				"tests/unit/wp.js"
			],
			[
				"shawp",
				"lib/shared/wp-request.js"
			],
			[
				"wp.j",
				"wp.js"
			],
			[
				"mocksup",
				"tests/unit/mocks/mock-superagent.js"
			],
			[
				"js",
				"Gruntfile.js"
			],
			[
				"bui",
				"lib/util/build-route-tree.js"
			],
			[
				"parse",
				"lib/util/parse-route-string.js"
			],
			[
				"typ",
				"lib/types.js"
			],
			[
				"col",
				"lib/shared/collection-request.js"
			],
			[
				"pag",
				"lib/pages.js"
			],
			[
				"comme",
				"lib/comments.js"
			],
			[
				"mixif",
				"tests/unit/lib/mixins/filters.js"
			],
			[
				"tesw",
				"tests/unit/lib/shared/wp-request.js"
			],
			[
				"mixpa",
				"lib/mixins/parameters.js"
			],
			[
				"libpar",
				"lib/parse-route-string.js"
			],
			[
				"contr",
				"CONTRIBUTING.md"
			],
			[
				"commen",
				"lib/comments.js"
			],
			[
				"inte",
				"tests/integration/categories.js"
			],
			[
				"intcat",
				"tests/integration/categories.js"
			],
			[
				"testinte",
				"tests/integration/posts.js"
			],
			[
				"test",
				"test.js"
			],
			[
				"integra",
				"tests/integration/posts.js"
			],
			[
				"alnum",
				"lib/shared/alphanumeric-sort.js"
			],
			[
				"filt",
				"lib/mixins/filter.js"
			],
			[
				"w",
				"wp.js"
			],
			[
				"posts",
				"lib/posts.js"
			],
			[
				"wpjs",
				"wp.js"
			],
			[
				"testpos",
				"tests/integration/posts.js"
			],
			[
				"unitwp",
				"tests/unit/wp.js"
			],
			[
				"read",
				"README.md"
			],
			[
				"taxon",
				"tests/integration/taxonomies.js"
			],
			[
				"tes",
				"test.js"
			],
			[
				"colle",
				"tests/unit/lib/shared/collection-request.js"
			],
			[
				"al",
				"lib/shared/alphanumeric-sort.js"
			],
			[
				"testwpr",
				"tests/unit/lib/shared/wp-request.js"
			],
			[
				"coll",
				"lib/shared/collection-request.js"
			],
			[
				"lib/ta",
				"lib/taxonomies.js"
			],
			[
				"page",
				"lib/pages.js"
			],
			[
				"collr",
				"lib/shared/collection-request.js"
			],
			[
				"pakc",
				"package.json"
			],
			[
				"tescolr",
				"tests/lib/shared/collection-request.js"
			],
			[
				"gu",
				"Gruntfile.js"
			],
			[
				"git",
				".gitignore"
			],
			[
				"packa",
				"package.json"
			],
			[
				"html",
				"docs-theme/assets/index.html"
			],
			[
				"telibshawp",
				"tests/lib/shared/wp-request.js"
			],
			[
				"wp-re",
				"lib/shared/wp-request.js"
			],
			[
				"tespost",
				"tests/lib/posts.js"
			],
			[
				"mocksu",
				"tests/mocks/mock-superagent.js"
			],
			[
				"tesjs",
				"test.js"
			],
			[
				"pagin",
				"/Users/kadam/dev/github/kadamwhite/wordpress-rest-api/lib/shared/paginate.js"
			],
			[
				"test.j",
				"test.js"
			],
			[
				"collere",
				"lib/shared/collection-request.js"
			],
			[
				"tesposts",
				"tests/lib/posts.js"
			],
			[
				"teswpre",
				"tests/lib/shared/wp-request.js"
			],
			[
				"collec",
				"lib/shared/collection-request.js"
			],
			[
				"testpag",
				"tests/lib/pages.js"
			],
			[
				"wp-r",
				"lib/shared/wp-request.js"
			],
			[
				"test.js",
				"test.js"
			],
			[
				"users",
				"lib/users.js"
			],
			[
				"tax",
				"tests/lib/taxonomies.js"
			],
			[
				"pages",
				"tests/lib/pages.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
		"xdebug":
		{
			"hide_conflict": false
		}
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 208.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
